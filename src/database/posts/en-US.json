[
  {
    "id": "j58woxctz6b7mpo",
    "title": "Validate your environment variables with Zod",
    "slug": "validate-your-environment-variables-with-zod",
    "locale": "en-US",
    "created": "2024-08-15T14:14:26.654Z",
    "updated": "2024-08-15T14:17:19.617Z",
    "content": "[Zod](https://github.com/colinhacks/zod) is the most famous validation library in the TypeScript ecosystem. With Zod, you create a _schema_ and validate your data according to the schema. Observe the schema below:\r\n\r\n```ts\r\nimport { z } from 'zod'\r\n\r\nconst UserSchema = z.object({\r\n  name: z.string().min(1),\r\n  age: z.number({ coerce: true }).min(18),\r\n  email: z.string().email(),\r\n})\r\n```\r\n\r\nThis schema can be used to validate an object as follows:\r\n\r\n```ts\r\nconst data = {\r\n  name: 'John Doe',\r\n  age: 18,\r\n  email: 'john@example.com',\r\n}\r\n\r\n// If there is a validation error, it throws an error\r\nconst validatedData = UserSchema.parse(data)\r\n\r\n// If there is a validation error, it returns an error object for you to handle later\r\nconst safeValidatedData = UserSchema.safeParse(data)\r\n// => { success: false; error: ZodError }\r\n// => { success: true; data: 'billie' }\r\n```\r\n\r\nZod is capable of performing various types of validations on your data, so be sure to read the [documentation](https://github.com/colinhacks/zod) for more details.\r\n\r\n## Validating Environment Variables\r\n\r\nWe can use Zod to validate the values present in [`process.env`](https://nodejs.org/api/process.html#processenv) and even process them before using the environment variables in our application. Usually, I like to create an `environment.ts` file, as in the example below:\r\n\r\n```ts\r\nimport { z } from 'zod'\r\n\r\nconst environmentSchema = z.object({\r\n  // Define the possible values for NODE_ENV, always leaving a default value:\r\n  NODE_ENV: z.enum(['test', 'development', 'production']).default('production'),\r\n  // Environment variables are always defined as strings. Here, convert the string to a number and set a default value:\r\n  PORT: z.number({ coerce: true }).default(3000),\r\n})\r\n\r\nexport const env = environmentSchema.parse(process.env)\r\n```\r\n\r\nThen, just import the variable and use it throughout my application:\r\n\r\n```ts\r\nimport Fastify from 'fastify'\r\nimport { env } from './environment.js'\r\n\r\nconst app = Fastify({ logger: true })\r\napp.listen({ port: env.PORT }, (err) => {\r\n  if (err) {\r\n    app.log.error(err)\r\n    process.exit(1)\r\n  }\r\n})\r\n```\n",
    "tags": [
      "Zod",
      "TypeScript",
      "Tips"
    ],
    "translates": "uybmrtdz9y7iuzk"
  },
  {
    "id": "8cxztl6gvjs26in",
    "title": "Using TypeScript in Node.js projects",
    "slug": "using-typescript-in-node-js-projects",
    "locale": "en-US",
    "created": "2024-07-01T12:24:04.381Z",
    "updated": "2024-07-08T09:51:36.801Z",
    "content": "[TypeScript](https://www.typescriptlang.org/) is tremendously helpful while developing Node.js applications. Let's see how to configure it for a seamless development experience.\r\n\r\n## Setting up TypeScript\r\n\r\nFirst, we need to install TypeScript. We can do this by running the following command:\r\n\r\n```bash\r\nnpm i -D typescript\r\n```\r\n\r\nNext, we need to create a `tsconfig.json` file in the root of our project. This file will contain the TypeScript configuration for our project. Here is an example of a `tsconfig.json` file that I picked from [Total TypeScript](https://www.totaltypescript.com/tsconfig-cheat-sheet) and added a few more things (read the code and pay attention to the comments):\r\n\r\n```json\r\n{\r\n  \"compilerOptions\": {\r\n    /* Base Options: */\r\n    \"esModuleInterop\": true,\r\n    \"skipLibCheck\": true,\r\n    \"target\": \"es2022\",\r\n    \"allowJs\": true,\r\n    \"resolveJsonModule\": true,\r\n    \"moduleDetection\": \"force\",\r\n    \"isolatedModules\": true,\r\n    \"verbatimModuleSyntax\": true,\r\n\r\n    /* Setting ~ as the alias for the src/ directory */\r\n    \"baseUrl\": \".\",\r\n    \"paths\": {\r\n      \"~/*\": [\"src/*\"]\r\n    },\r\n\r\n    /* Strictness */\r\n    \"strict\": true,\r\n    \"noUncheckedIndexedAccess\": true,\r\n    \"noImplicitOverride\": true,\r\n\r\n    /* If transpiling with TypeScript: */\r\n    \"module\": \"NodeNext\",\r\n    \"outDir\": \"dist\",\r\n    \"sourceMap\": true,\r\n\r\n    /* AND if you're building for a library: */\r\n    \"declaration\": true,\r\n\r\n    /* AND if you're building for a library in a monorepo: */\r\n    \"composite\": true,\r\n    \"declarationMap\": true,\r\n\r\n    /* If NOT transpiling with TypeScript: */\r\n    \"module\": \"preserve\",\r\n    \"noEmit\": true,\r\n\r\n    /* If your code runs in the DOM: */\r\n    \"lib\": [\"es2022\", \"dom\", \"dom.iterable\"],\r\n\r\n    /* If your code doesn't run in the DOM: */\r\n    \"lib\": [\"es2022\"],\r\n  },\r\n  /* I'm considering all your code is in src/ */\r\n  \"include\": [\"src/**/*.ts\"]\r\n}\r\n```\r\n\r\n## Setting up the build script\r\n\r\nNext, we need to set up a build script that will compile our TypeScript code to JavaScript. First, install [`tsc-alias`](https://www.npmjs.com/package/tsc-alias) to handle the aliases we defined in the `tsconfig.json` file:\r\n\r\n```bash\r\nnpm i -D tsc-alias\r\n```\r\n\r\nThen, you can add the `build` script by adding the following script to our `package.json` file:\r\n\r\n```json\r\n{\r\n  \"scripts\": {\r\n    \"build\": \"tsc && tsc-alias\"\r\n  }\r\n}\r\n```\r\n\r\n## Setting up the development script\r\n\r\nNext, we need to set up a development script that will watch for changes in our TypeScript files and recompile them. Personally, I like to use [`tsx`](https://tsx.is/), as it provides a much faster development experience compared to the built-in [TypeScript watcher](https://www.typescriptlang.org/docs/handbook/configuring-watch.html) or [ts-node](https://typestrong.org/ts-node/). First, install `tsx`:\r\n\r\n```bash\r\nnpm i -D tsx\r\n```\r\n\r\nThen, you can add the `dev` script (in order to start the project in development mode) by adding the following script to your `package.json` file:\r\n\r\n```json\r\n{\r\n  \"scripts\": {\r\n    \"build\": \"tsc && tsc-alias\",\r\n    \"dev\": \"node --import=tsx --watch ./src/index.ts\"\r\n  }\r\n}\r\n```\r\n\r\nYes, you won't get typechecks while developing using `tsx`, but you can run `npm run build` for that or add a new `typecheck` scripts to your `package.json`, and run it whenever you want to check for type errors:\r\n\r\n```json\r\n{\r\n  \"scripts\": {\r\n    \"build\": \"tsc && tsc-alias\",\r\n    \"dev\": \"node --import=tsx --watch ./src/index.ts\",\r\n    \"typecheck\": \"tsc --noEmit\"\r\n  }\r\n}\r\n```\n",
    "tags": [
      "typescript",
      "Node.js",
      "javascript"
    ],
    "translates": "5xfzc0v2gy17ywy"
  },
  {
    "id": "46trc5wkbpbc97s",
    "title": "Should I commit node_modules directory to git?",
    "slug": "should-i-commit-node-modules-directory-to-git",
    "locale": "en-US",
    "created": "2024-06-04T17:45:35.356Z",
    "updated": "2024-06-04T17:49:44.038Z",
    "content": "TL; DR: No. Please add `node_modules` to your `.gitignore` file:\r\n\r\n```\r\nnode_modules\r\n```\r\n\r\n## But, why?\r\n\r\nThe `node_modules` directory is where your package manager (that can be [npm](https://www.npmjs.com/), [yarn](https://classic.yarnpkg.com/) or [pnpm](https://pnpm.io/)) will install all the project dependencies listed on your `package.json`. Regardless of the package manager you choose, a lockfile (`package-lock.json`,  `yarn.lock` or `pnpm-lock.yaml`, respectelly) will be generated in the first time you install your project dependencies, describing the entire dependency tree. This way, every time you need to reinstall your project dependencies, you shall get the exact same files.\r\n\r\nThe lockfile should be commited to `git`, enabling the re-installation of the tree of dependencies in any other ambient, what makes unecessary to commit the `node_modules` directory to `git` (also, it cuts the size of your repository by a lot, as `node_modules` can consumes gigabytes of space).\n",
    "tags": [
      "Node.js",
      "javascript",
      "npm"
    ],
    "translates": "bjdnvqai9ykbt6v"
  },
  {
    "id": "0mdfakkgsmugaex",
    "title": "Mastering Insertion Sort: A Detailed Guide",
    "slug": "mastering-insertion-sort-a-detailed-guide",
    "locale": "en-US",
    "created": "2024-01-26T23:06:53.913Z",
    "updated": "2024-01-26T23:06:53.913Z",
    "content": "Sorting is a fundamental operation in the field of computer science, and because of this, there are various algorithms available to solve this problem. Each one is chosen based on factors such as the number of items to sort, the degree of order already present, the computer architecture where the algorithm will be executed, the type of storage device, among others. In this article, we will explore the insertion sort algorithm, understanding its nuances, strengths, and limitations.\r\n\r\n## What is insertion sort?\r\nInsertion sort is a comparison-based algorithm that constructs its output one element at a time. It works similarly to the method we use to sort a deck of cards: we take one card at a time, compare it with the ones we already have in our hand, place the card in the correct position, and repeat this action until we finish our deck.\r\n\r\nIt is an adaptive algorithm, meaning it is efficient for small data sets, as well as other quadratic complexity algorithms ($O(n^2)$). It is simple to implement, requires a constant amount of memory, as changes in the list are made in the list itself (without the need to create a new list, which would double the use of memory), and is capable of sorting the list as it receives it.\r\n\r\n## How does insertion sort work?\r\n**Initialization:** We assume that the first element of our list is already sorted. We proceed to the next element, consider it as our key, and insert it in the correct position in the sorted part of the list;\r\n\r\n**Iteration:** For each item in the list (starting from the second element), we store the current item (key) and its position. Then we compare the key with the elements in the sorted part of the list (elements before the key);\r\n\r\n**Insertion:** If the current element in the sorted part is greater than the key, we move that element one position up. This creates space for the new key to be inserted;\r\n\r\n**Repositioning the Key:** We continue moving elements one position up until we find the correct position for the key. This position is found when we encounter an element that is less than or equal to the key or when we reach the beginning of the list;\r\n\r\n**Repeat:** The process is repeated for all the elements in the list.\r\n\r\n## Implementation in JavaScript\r\nTo better understand the algorithm, let's implement it in JavaScript:\r\n```js\r\n/**\r\n* Sorts an array of numbers using the insertion sort algorithm.\r\n* \r\n* @param  {number[]}  numbers - The list of numbers to be sorted.\r\n* @returns  {number[]} - The sorted list of numbers.\r\n*/\r\nfunction insertionSort(numbers) {\r\n  for (let i = 1; i < numbers.length; i++) {\r\n    const key = numbers[i]\r\n    let j = i - 1\r\n    \r\n    while (j >= 0 && numbers[j] > key) {\r\n      numbers[j  +  1] =  numbers[j]\r\n      j--\r\n    }\r\n\r\n    numbers[j  +  1] = key\r\n  }\r\n}\r\n``` \r\n## Complexity Analysis\r\n### Time Complexity\r\n**Best Case (Array is already sorted):** $O(n)$. This is because the inner loop (while) is not executed at all;\r\n**Average Case and Worst Case (Array is sorted in reverse order):** $O(n^2)$. In the worst case, each iteration will cause an element to be moved. This makes the algorithm inefficient for large data sets.\r\n## Space Complexity\r\n**Space Complexity:**  $O(1)$. Insertion sort is an in-place algorithm; it requires a constant amount of memory space.\n",
    "tags": [
      "algorithms",
      "computerscience",
      "tutorial"
    ],
    "translates": "y9hhvn3ra53p0qj"
  },
  {
    "id": "fk4euqpea154kb9",
    "title": "Introduction to algorithms",
    "slug": "introduction-to-algorithms",
    "locale": "en-US",
    "created": "2024-01-25T17:00:12.952Z",
    "updated": "2024-01-25T17:01:52.985Z",
    "content": "## What is an Algorithm?\r\nAn algorithm is a precise and unambiguous specification of a sequence of computational steps that can be mechanically performed[^1]. From this, we can think of a function that receives a value or a set of values as input and returns a value or a set of values as its output.\r\n\r\nAn algorithm can be correct or incorrect. It is correct when, given its input parameters, its output is correct and, therefore, solves the computational problem for which it was developed. An incorrect algorithm, on the other hand, may stop with an incorrect output or may not stop at all for some input instances. Still, some incorrect algorithms can still have useful applications.\r\n\r\nThere can be different algorithms that solve the same problem, some more efficient, that is, faster than others. But, not every problem has an efficient solution. Such problems are known as <abbr title=\"Non-deterministic Polynomial time\">NP</abbr>-complete.\r\n\r\n<abbr title=\"Non-deterministic Polynomial time\">NP</abbr>-complete problems are very interesting: even though no efficient algorithm has been found for this class of problems, it has not been proven that it is not possible to find an efficient algorithm (from class P, which can be solved in polynomial time) for such a problem. Moreover, if there were an efficient algorithm to solve an NP-complete problem, it would mean that there is an efficient algorithm for all <abbr title=\"Non-deterministic Polynomial time\">NP</abbr>-complete problems.\r\n\r\n<Alert title=\"P vs. NP\">\r\nP vs. NP is a fundamental question in computer science, specifically in the field of computational complexity theory. It concerns the relationship between two classes of problems. The P class consists of decision problems (problems with a yes or no answer) that can be quickly solved (in polynomial time) by a deterministic computer, meaning that the time needed to solve the problem grows at a manageable rate as the size of the input increases. On the other hand, the NP class consists of decision problems for which, if a solution is provided, it can be quickly verified (also in polynomial time) by a deterministic computer.\r\n\r\nThe crucial question, \"Is P equal to NP?\", asks whether every problem whose solution can be quickly verified (NP) can also be solved quickly (P). This is profound because, if P were equal to NP, it would mean that all the problems that we can verify quickly can also be solved quickly. This has vast implications for various fields, including cryptography, optimization, and algorithm design.\r\n</Alert>\r\n\r\n## Algorithmic Complexity\r\nWhen we talk about algorithms, most of the time we are interested in the growth rate of time and space required to solve increasingly larger instances of certain problems. If we are interested in the time a particular algorithm takes to perform its function, we are interested in its time complexity. And the behavior of the time complexity limit of our algorithm in relation to the increase of the problem instances is called asymptotic time complexity. And it is this asymptotic complexity that determines the size of the problem that can be solved by algorithms[^2].\r\n\r\nIf an algorithm takes a time $cn^2$ for a constant $c$ to process an input of size $n$, we say that the complexity of the algorithm is of the order of $n^2$, or, in Bachmann–Landau notation (also called asymptotic notation and Big O notation), the algorithm has complexity $O(n^2)$.\r\n\r\nTo get a better idea of what this means in relation to the runtime of our algorithm, consider that one unit of time on the computer on which we run our algorithm is 1 millisecond. Now, we want to know what the maximum size of input that our algorithm can process within a certain time limit (one second, one hour, and one day). Note, in the table below, how much the complexity of the algorithm interferes with the maximum size of the input it can handle, given the time limit:\r\n\r\n| Time Complexity | 1 second |\t1 minute | 1 hour |\r\n|--|--|--|--|\r\n| $n$ | 1000 | 60000 | 360000 |\r\n| $n \\log_2 n$ | 140 | 4895 | 204095 |\r\n| $n^2$ | 31 | 244 | 1897 |\r\n| $n^3$ | 10 | 39 | 153 |\r\n| $2^n$ | 9 | 15 | 21 |\r\n\r\nEven though we can build faster computers, the increase in the execution speed of less efficient algorithms would not be so significant, so we should always seek the most efficient algorithm to address a given problem.\r\n\r\n[^1]: AHO, Alfred V.; ULLMAN, Jeffrey D. _Foundations of Computer Science_. Stanford, 1994.\r\n[^2]: AHO, Alfred V.; HOPCROFT, John E.; ULLMAN, Jeffrey D. _The Design and Analysis of Computer Algorithms_. Addison-Wesley, 1974.\n",
    "tags": [
      "Beginners",
      "Computer Science",
      "algorithms"
    ],
    "translates": "q56goy3mqfdb3hu"
  },
  {
    "id": "91sox12o3ozzl5n",
    "title": "Rendering JSX on the Server with Fastify",
    "slug": "rendering-jsx-on-the-server-with-fastify",
    "locale": "en-US",
    "created": "2024-01-25T00:35:37.056Z",
    "updated": "2024-01-25T00:42:06.600Z",
    "content": "[JSX](https://facebook.github.io/jsx/) is an excellent abstraction for building web interfaces. Introduced by Facebook and popularized by React, it's an extension of JavaScript designed to abstract nested function calls. It's expected that JSX code will be pre-processed (transpiled) into valid JavaScript before being executed in browsers or environments like Node.js.\r\n\r\n##   Project Setup\r\n\r\nFirst of all, let's start our project and install the necessary dependencies:\r\n```\r\nnpm init -y\r\nnpm i fastify react react-dom\r\nnpm i -D @types/node @types/react @types/react-dom tsx typescript\r\n```\r\n\r\nNow, we set up the scripts for our project. The `package.json` should look like this:\r\n\r\n```json\r\n{\r\n  \"type\":  \"module\",\r\n  \"name\":  \"fastify-react\",\r\n  \"version\":  \"1.0.0\",\r\n  \"author\":  \"Douglas Moura <douglas.ademoura@gmail.com>\",\r\n  \"description\":  \"POC on rendering React components from Fastify\",\r\n  \"main\":  \"dist/main.js\",\r\n  \"scripts\": {\r\n    \"start\":  \"tsc && node dist/main.js\",\r\n    \"dev\":  \"tsx --watch src/main.tsx\",\r\n    \"build\":  \"tsc\"\r\n  },\r\n  \"license\":  \"ISC\",\r\n  \"dependencies\": {\r\n    \"fastify\":  \"^4.25.2\",\r\n    \"react\":  \"^18.2.0\",\r\n    \"react-dom\":  \"^18.2.0\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@types/node\":  \"^20.11.6\",\r\n    \"@types/react\":  \"^18.2.48\",\r\n    \"@types/react-dom\":  \"^18.2.18\",\r\n    \"tsx\":  \"^4.7.0\",\r\n    \"typescript\":  \"^5.3.3\"\r\n  }\r\n}\r\n```\r\nAnd this is the `tsconfig.json` that we will use:\r\n```json\r\n{\r\n  \"compilerOptions\": {\r\n    \"target\":  \"ESNext\",\r\n    \"module\":  \"ESNext\",\r\n    \"lib\": [\r\n      \"dom\",\r\n      \"es6\",\r\n      \"es2017\",\r\n      \"esnext.asynciterable\"\r\n    ],\r\n    \"skipLibCheck\":  true,\r\n    \"sourceMap\":  false,\r\n    \"outDir\":  \"./dist\",\r\n    \"moduleResolution\":  \"node\",\r\n    \"removeComments\":  true,\r\n    \"noImplicitAny\":  true,\r\n    \"strictNullChecks\":  true,\r\n    \"strictFunctionTypes\":  true,\r\n    \"noImplicitThis\":  true,\r\n    \"noUnusedLocals\":  true,\r\n    \"noUnusedParameters\":  true,\r\n    \"noImplicitReturns\":  true,\r\n    \"noFallthroughCasesInSwitch\":  true,\r\n    \"allowSyntheticDefaultImports\":  true,\r\n    \"esModuleInterop\":  true,\r\n    \"emitDecoratorMetadata\":  true,\r\n    \"experimentalDecorators\":  true,\r\n    \"resolveJsonModule\":  true,\r\n    \"baseUrl\":  \".\",\r\n    \"jsx\":  \"react-jsx\"\r\n  },\r\n  \"exclude\": [\r\n    \"node_modules\"\r\n  ],\r\n  \"include\": [\r\n    \"./src/**/*.ts\",\r\n    \"./src/**/*.tsx\"\r\n  ]\r\n}\r\n```\r\n\r\n## Creating our components\r\n\r\nThe React ecosystem already provides the necessary tools for rendering our components to HTML and sending them directly from the server to our client. So, first, let's create the root component:\r\n\r\n```ts\r\n// src/components/root.tsx\r\n\r\ntype  RootProps  = {\r\n  children:  React.ReactNode\r\n  title:  string\r\n}\r\n\r\nexport  function  Root({ children, title }:  RootProps) {\r\n  return (\r\n    <html  lang=\"en\">\r\n      <head>\r\n        <meta  charSet=\"utf-8\"  />\r\n        <meta  name=\"viewport\"  content=\"width=device-width, initial-scale=1\"  />\r\n        <title>{title}</title>\r\n      </head>\r\n      <body>{children}</body>\r\n    </html>\r\n  )\r\n}\r\n```\r\n\r\nAnd our home page:\r\n\r\n```ts\r\n// src/components/index.tsx\r\n\r\nexport  function  App() {\r\n  return (\r\n    <h1>Hello, World!</h1>\r\n  )\r\n}\r\n```\r\n##   Configuring Fastify to Render Our React Component\r\nAs we don't intend to load React to hydrate our HTML on the client side, we can use the `renderToStaticMarkup` function exported from `react-dom/server`. Our server initialization file will look like this:\r\n\r\n```ts\r\nimport Fastify from  'fastify'\r\nimport { renderToStaticMarkup } from  'react-dom/server'\r\n\r\nimport { App } from  './components/index.js'\r\nimport { Root } from  './components/root.js'\r\n\r\ntype  RenderArgs  = {\r\n  children:  React.ReactNode\r\n  title:  string\r\n}\r\n\r\nconst  render  = ({ title, children }:  RenderArgs) => {\r\n  return `<!DOCTYPE html>${renderToStaticMarkup(\r\n    <Root  title={title}>{children}</Root>\r\n  )}`\r\n}\r\n\r\nconst fastify =  Fastify({\r\n  logger:  true,\r\n})\r\n\r\nfastify.get('/', async  function  handler(_request, reply) {\r\n  reply.type('text/html')\r\n  return  render({ children:  <App  />, title:  'Hello, World!' })\r\n})\r\n\r\ntry {\r\n  await fastify.listen({ port:  3000 })\r\n} catch (err) {\r\n  fastify.log.error(err)\r\n  process.exit(1)\r\n}\r\n```\r\n\r\nIf you start the project now (`npm run dev`), you should see the page at [http://localhost:3000](http://localhost:3000/). Of course, we can enhance our implementation by using the new streaming API, introduced in React 18 ([which is the recommended method](https://github.com/reactwg/react-18/discussions/106#discussion-3611411)). To do that, we will make the following changes to our code:\r\n```ts\r\nimport Fastify from  'fastify'\r\nimport { renderToStaticNodeStream } from  'react-dom/server'\r\nimport { Transform } from  'node:stream'\r\n\r\nimport { App } from  './components/index.js'\r\nimport { Root } from  './components/root.js'\r\n\r\ntype  RenderArgs  = {\r\n  children:  React.ReactNode\r\n  title:  string\r\n}\r\n\r\nconst  render  = ({ title, children }:  RenderArgs) => {\r\n  let  isFirstChunk  =  true\r\n  const  prepend  =  new  Transform({\r\n    transform(chunk, _encoding, callback) {\r\n      if (isFirstChunk) {\r\n        isFirstChunk  =  false\r\n        this.push('<!DOCTYPE html>')\r\n      }\r\n      callback(null, chunk)\r\n    },\r\n  })\r\n\r\n  return  renderToStaticNodeStream(\r\n    <Root  title={title}>{children}</Root>\r\n  ).pipe(prepend)\r\n}\r\n\r\nconst  fastify  =  Fastify({\r\n  logger:  true,\r\n})\r\n\r\nfastify.get('/', async  function  handler(_request, reply) {\r\n  const  stream  =  render({ children:  <App  />, title:  'Hello, World!' })\r\n\r\n  reply.type('text/html')\r\n  reply.send(stream)\r\n})\r\n\r\ntry {\r\n  await  fastify.listen({ port:  3000 })\r\n} catch (err) {\r\n  fastify.log.error(err)\r\n  process.exit(1)\r\n}\r\n```\r\nAnd with that, we are able to render our React components on the server side and stream them to our client. Here is the [link](https://github.com/DouglasdeMoura/react-fastify) to the repository.\n",
    "tags": [
      "Fastify",
      "Tips",
      "javascript",
      "Node.js"
    ],
    "translates": "p7310widh7o7h9e"
  },
  {
    "id": "wxuu4bshveoe7ld",
    "title": "The Powerful Programmer",
    "slug": "the-powerful-programmer",
    "locale": "en-US",
    "created": "2024-01-23T13:26:41.726Z",
    "updated": "2024-01-25T17:03:59.369Z",
    "content": "Estimating, implementing, and deploying software rapidly is a characteristic of powerful programmers, as [Kent Beck](https://www.kentbeck.com/) mentions in his book [Extreme Programming Explained](https://www.oreilly.com/library/view/extreme-programming-explained/0201616416/). In this article, I will explore these three points, inserting my own opinions on each one.\r\n\r\n## Estimation\r\n\r\nEstimating a software project is [difficult](https://jacobian.org/2021/may/20/estimation/), and there are various different techniques on how to estimate a software project. You can create a method, through your own experience, learn the method used by other companies but, you must pay attention that the central point is that you have a good idea of how much time the project will take. Projects have a beginning, middle, and end. Learn to estimate your work.\r\n\r\n## Implementation\r\n\r\nFor me, particularly, implementing is the most fun part of the project. And as with any job, we have to be pragmatic in the choice of language and tools. Being pragmatic in the choice does not necessarily mean using the same as everyone else, because, often, some tools continue to be strong in the market due to pure inertia. [Express](https://expressjs.com/) is a good example of this. Besides there being many better options with better support (like [Fastify](https://fastify.dev/)), many teams still start new projects with Express, even if it is not being maintained regularly, does not handle Promise rejections, etc.\r\n\r\nBesides the issue of tool choice, it is necessary that you **master** the technology stack of your project, being able to implement the best solutions in the shortest possible time. At the tip of your tongue, you have to know a good pattern to apply in the project, a good backend framework, a good frontend framework or even a good full-stack framework. And the experience of development cannot be left out. For the implementation to be fast, the understanding of the project must be easy, its documentation adequate, and its tests need to validate the **intention** flows of the user who will use the system.\r\n\r\n## Deployment\r\n\r\nToday, can you build an entire project and put it into production, by yourself? And I'm not talking about uploading your project to a completely managed platform, like Vercel, but rather, about taking a Linux machine, installing the necessary tools, and exposing your application to the web. And no, this is not any kind of purism. If you are not a startup that can burn a few million reais per year, without worrying about the cost of your infrastructure, you should, at least, know how to start your application and keep it active between server restarts (preferably using containers), put it behind a reverse proxy (like [NGINX](https://www.nginx.com/) or [Caddy](https://caddyserver.com/)), configure a firewall, and make a backup of the database in three different places. You can still bring up multiple instances of your application and use the same proxy tool as a load balancer to distribute your application's access to the different instances that are running.\n",
    "tags": [
      "Software Engineering",
      "Patterns",
      "Carreer"
    ],
    "translates": "jbn0kg24q86k7vn"
  },
  {
    "id": "bdwhaei947bfrx4",
    "title": "Generating MD5 hashes on Node.js",
    "slug": "generating-md5-hashes-on-node-js",
    "locale": "en-US",
    "created": "2024-01-23T13:20:06.581Z",
    "updated": "2024-01-23T13:29:10.648Z",
    "content": "You can create hashes in Node.js without the need to install any external library. Usually, I create the following utility function in the projects I work on:\r\n\r\n```javascript\r\n/**\r\n * Hashes a string using md5\r\n *\r\n * @param {string} str\r\n * @returns {string}\r\n */\r\nexport const md5 = (str) => createHash('md5').update(str).digest('hex')\r\n```\r\n\r\nAnd I use it to replace the [md5](https://www.npmjs.com/package/md5) library whenever I come across it.\r\n\r\nNote that you can create hashes for any algorithm supported by the OpenSSL version on your platform. On Linux and Mac, you can see which algorithms are available with the command `openssl list -digest-algorithms`.\n",
    "tags": [
      "Node.js",
      "javascript"
    ],
    "translates": "zj7xcfn2r753ld7"
  },
  {
    "id": "5d4agn9wp8tkd45",
    "title": "Finding the greatest common divisor in TypeScript",
    "slug": "finding-the-greatest-common-divisor-in-typescript",
    "locale": "en-US",
    "created": "2024-01-12T16:31:36.266Z",
    "updated": "2024-01-25T13:55:08.252Z",
    "content": "First described in the classic geometry book *Elements*, by the ancient Greek mathematician Euclid (ca. 300 BC, at the book VII, proposition 2), the method of finding de greatest common divisor between the positive numbers $a$ and $b$, being $a > b$ consists on the knowledge that the common divisors of $a$ and $b$ are the same of $a - b$ and $b$. Therefore, we can find this greatest common divisor by replacing the largest number ($a$) by the different between the two numbers ($a - b$), repeatedly, until the two numbers are equal. In TypeScript, we can do that like this:\r\n\r\n```typescript\r\nconst gcd = (a: number, b: number): number => {\r\n  // When `a` is equal to `b`, return the result\r\n  if (a === b) {\r\n    return a\r\n  }\r\n\r\n  // When `a` is bigger than b, calculate the the GCD again\r\n  // with the new `a` being `a - b`.\r\n  if (a > b) {\r\n    return gcd(a - b, b)\r\n  }\r\n\r\n  // If the new `b` is bigger than `a`,\r\n  // subtract a from it.\r\n  return gcd(a, b - a)\r\n}\r\n```\r\n\r\nThis method can be very slow if the difference between $a$ and $b$ is too large. Thankfully, there's another method to find the greatest common divisor between two numbers, that can be described as follows:\r\n\r\n1. In order to find the greatest common divisor between $a$ and $b$, being $a > b$, perform the division between the two numbers. This operation will give a quotient and a remainder (that we will call $q$ and $r$, respectively). Thus, $a$ can be described as $a = q \\times b + r$;\r\n2.  If $r$ is equal to 0, we stop, because we found that the greatest common divisor of $a$ and $b$ is $b$. Otherwise, we go back to step 1, making $b$ the new $a$ and $r$ will be the new $b$.\r\n\r\nNow, we can start with the implementation of the algorithm above:\r\n\r\n```typescript\r\nconst gcd = (a: number, b: number): number => {\r\n  // First, we take the remainder between the division of a and b:\r\n  const r = a % b\r\n  \r\n  // If the remainder is equal to zero, it means that we already found the\r\n  // greatest common divisor, therefore, we return b:\r\n  if (r === 0) {\r\n    return b\r\n  }\r\n  \r\n  // If the remainder is not equal to 0, we call the function again\r\n  // with the new values for a and b:\r\n  return gcd(b, a % b)\r\n}\r\n```\r\n\r\nThe implementation is very straightforward and can be read exactly as is described in steps 1 and 2. We can make the function simpler, by checking, directly, if $b$ is equal to zero and only doing the remainder operation afterwards. Therefore, if the function receive a $b$ that is equal to zero, we will know that $a$ is the greatest common divisor:\r\n\r\n```typescript\r\nconst gcd = (a: number, b: number): number => {\r\n  if (b === 0) {\r\n    return a\r\n  }\r\n  \r\n  return gcd(b, a % b)\r\n}\r\n```\r\n\r\nThis variant is called *Euclidean algorithm* (in contrast of the first one, which is the *Euclid's algorithm*) and it significantly faster than the first implementation.\r\n\r\n## Alternative implementations\r\n\r\nWe can also take a different approach. Instead of calling our `gcd` function recursively, we can implement our function using a `while` loop (analogous to our first implementation above):\r\n\r\n```typescript\r\nconst gcd = (a: number, b: number): number => {\r\n  // Run this loop while a is different of b\r\n  while (a !== b) {\r\n    if (a > b) {\r\n      // Subtracts b from a while a is bigger than b\r\n      a = a - b\r\n      // Go to the next loop\r\n      continue\r\n    }\r\n    // Subtracts a from b when a <= b\r\n    b = b - a\r\n  }\r\n  // Returns the greatest common divisor between a and b\r\n  return a\r\n}\r\n```\r\n\r\nAnd this is another way (analogous to our second implementation above):\r\n\r\n```typescript\r\nconst gcd = (a: number, b: number): number => {\r\n  // Run this loop while `b` is different from 0\r\n  while (b !== 0) {\r\n    // Save the new value for a in a temporary variable\r\n    const newA = b\r\n    // Set b to the modulo of a and b (the remainder of the division between a and b)\r\n    b = a % b\r\n    // Set a to its new value before the next loop\r\n    a = newA\r\n  }\r\n  \r\n  // Now that b is equal to 0, we know that a is the greatest common divisor\r\n  return a\r\n}\r\n```\r\n\r\n## Finding the greatest common between three or more numbers\r\n\r\nThe greatest  of three or more numbers is equal the product of the prime factors common to all the numbers (we will explore more of that in a future article), but, you can also calculate the greatest common divisor between pairs of this list of numbers with the same functions we have showed already. So, let's refactor our `gcd` function to receive multiple parameters:\r\n\r\n```typescript\r\nconst gcd = (...numbers: number[]): number => {\r\n  const calculateGcd = (a: number, b: number): number => {\r\n    if (b === 0) {\r\n      return a\r\n    }\r\n\r\n    return calculateGcd(b, a % b)\r\n  };\r\n\r\n  return (\r\n    numbers\r\n      // Just to be sure, sort numbers in descendant order:\r\n      .sort((a, b) => b - a)\r\n      // Call `calculateGcd` for each pair in the numbers array:\r\n      .reduce((a, b) => calculateGcd(a, b))\r\n  )\r\n}\r\n```\r\n\r\n## Validating our input\r\n\r\nLet's guarantee that our functions should always receive, at least, two numbers and that all numbers must not be negative:\r\n\r\n```typescript\r\nconst gcd = (...numbers: number[]): number => {\r\n  if (numbers.length < 2) {\r\n    throw new Error(\"You must pass, at least, 2 numbers\")\r\n  }\r\n\r\n  if (numbers.some((number) => number < 0)) {\r\n    throw new Error(\"The numbers must be >= 0\")\r\n  }\r\n\r\n  const calculateGcd = (a: number, b: number): number => {\r\n    if (b === 0) {\r\n      return a\r\n    }\r\n\r\n    return calculateGcd(b, a % b);\r\n  };\r\n\r\n  return (\r\n    numbers\r\n      // Just to be sure, sort numbers in descendant order:\r\n      .sort((a, b) => b - a)\r\n      // Call `calculateGcd` for each pair in the numbers array:\r\n      .reduce((a, b) => calculateGcd(a, b))\r\n  )\r\n}\r\n```\n",
    "tags": [
      "typescript",
      "mathematic",
      "javascript"
    ],
    "translates": "vfb16zvqx9d6eq8"
  },
  {
    "id": "8mgwfzzig2t1wd9",
    "title": "Understanding Tail Call Optimization With JavaScript",
    "slug": "understanding-tail-call-optimization-with-javascript",
    "locale": "en-US",
    "created": "2023-10-24T15:13:38.216Z",
    "updated": "2023-10-24T15:27:40.960Z",
    "content": "Consider the following function that calculates the factorial of a number:\r\n\r\n```javascript\r\nconst factorial = (n) => {\r\n  let result = 1\r\n\r\n  while (n > 1) {\r\n    result *= n\r\n    n--\r\n  }\r\n\r\n  return result\r\n}\r\n```\r\n<Alert title=\"Factorial\" mb=\"md\" color=\"blue\">\r\nIn Mathematics, the factorial of a non-negative integer (n!) is the product of all positive integers less than or equal to n.\r\n</Alert>\r\n\r\nThe function above was implemented iteratively, that is, it uses a loop to calculate the factorial of a number. However, it is possible to implement the same function recursively (that is, a function that references itself):\r\n\r\n```javascript\r\nconst factorial = (n) => {\r\n  if (n === 0) return 1\r\n\r\n  return n * factorial(n - 1)\r\n}\r\n```\r\n\r\nThe result of both functions is the same, however, the iterative function is [much more efficient](https://jsben.ch/1qyl8) (in JavaScript) than the recursive function. In addition, if we try to calculate the factorial of a very large number, we encounter the error RangeError: Maximum call stack size exceeded. Let's understand why this happens and how we can improve the recursive function.\r\n\r\n## Call Stack\r\n\r\nA [call stack](https://developer.mozilla.org/en-US/docs/Glossary/Call_stack) is a data structure that stores information about a program's functions. When a function is called, it is added to the execution stack, as well as all the functions it calls. When a function returns, it is removed from the execution stack. Each function added to the stack is called a _stack frame_.\r\n\r\nIn order to understand what is happening, let's try to represent, graphically, how the calculation of the factorial of 6 is done with the iterative function:\r\n\r\n<SVG64 content=\"\" />\r\n\r\nNow, compare it with the substitution model for calculating the factorial of 6 using the recursive function:\r\n<SVG64 content=\"PHN2ZyB2ZXJzaW9uPSIxLjEiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgdmlld0JveD0iMCAwIDUyMy4xMjUwODcxODU1MzM5IDMwOCIgc3R5bGU9Im1heC13aWR0aDogNTAwcHg7Ij4KICA8cmVjdCB4PSIwIiB5PSIwIiB3aWR0aD0iNTIzLjEyNTA4NzE4NTUzMzkiIGhlaWdodD0iMzA4IiBmaWxsPSIjZmZmZmZmIj48L3JlY3Q+PGcgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoMTAgMTApIHJvdGF0ZSgwIDIzNC4zNzUgMTQ0KSI+PHRleHQgeD0iMCIgeT0iMCIgZm9udC1mYW1pbHk9IkNhc2NhZGlhLCBTZWdvZSBVSSBFbW9qaSxtb25vc3BhY2UiIGZvbnQtc2l6ZT0iMjBweCIgZmlsbD0iIzFlMWUxZSIgdGV4dC1hbmNob3I9InN0YXJ0IiBzdHlsZT0id2hpdGUtc3BhY2U6IHByZTsiIGRpcmVjdGlvbj0ibHRyIiBkb21pbmFudC1iYXNlbGluZT0idGV4dC1iZWZvcmUtZWRnZSI+ZmFjdG9yaWFsKDYpPC90ZXh0Pjx0ZXh0IHg9IjAiIHk9IjI0IiBmb250LWZhbWlseT0iQ2FzY2FkaWEsIFNlZ29lIFVJIEVtb2ppLG1vbm9zcGFjZSIgZm9udC1zaXplPSIyMHB4IiBmaWxsPSIjMWUxZTFlIiB0ZXh0LWFuY2hvcj0ic3RhcnQiIHN0eWxlPSJ3aGl0ZS1zcGFjZTogcHJlOyIgZGlyZWN0aW9uPSJsdHIiIGRvbWluYW50LWJhc2VsaW5lPSJ0ZXh0LWJlZm9yZS1lZGdlIj42ICogZmFjdG9yaWFsKDUpPC90ZXh0Pjx0ZXh0IHg9IjAiIHk9IjQ4IiBmb250LWZhbWlseT0iQ2FzY2FkaWEsIFNlZ29lIFVJIEVtb2ppLG1vbm9zcGFjZSIgZm9udC1zaXplPSIyMHB4IiBmaWxsPSIjMWUxZTFlIiB0ZXh0LWFuY2hvcj0ic3RhcnQiIHN0eWxlPSJ3aGl0ZS1zcGFjZTogcHJlOyIgZGlyZWN0aW9uPSJsdHIiIGRvbWluYW50LWJhc2VsaW5lPSJ0ZXh0LWJlZm9yZS1lZGdlIj42ICogKDUgKiBmYWN0b3JpYWwoNCkpPC90ZXh0Pjx0ZXh0IHg9IjAiIHk9IjcyIiBmb250LWZhbWlseT0iQ2FzY2FkaWEsIFNlZ29lIFVJIEVtb2ppLG1vbm9zcGFjZSIgZm9udC1zaXplPSIyMHB4IiBmaWxsPSIjMWUxZTFlIiB0ZXh0LWFuY2hvcj0ic3RhcnQiIHN0eWxlPSJ3aGl0ZS1zcGFjZTogcHJlOyIgZGlyZWN0aW9uPSJsdHIiIGRvbWluYW50LWJhc2VsaW5lPSJ0ZXh0LWJlZm9yZS1lZGdlIj42ICogKDUgKiAoNCAqIGZhY3RvcmlhbCgzKSkpPC90ZXh0Pjx0ZXh0IHg9IjAiIHk9Ijk2IiBmb250LWZhbWlseT0iQ2FzY2FkaWEsIFNlZ29lIFVJIEVtb2ppLG1vbm9zcGFjZSIgZm9udC1zaXplPSIyMHB4IiBmaWxsPSIjMWUxZTFlIiB0ZXh0LWFuY2hvcj0ic3RhcnQiIHN0eWxlPSJ3aGl0ZS1zcGFjZTogcHJlOyIgZGlyZWN0aW9uPSJsdHIiIGRvbWluYW50LWJhc2VsaW5lPSJ0ZXh0LWJlZm9yZS1lZGdlIj42ICogKDUgKiAoNCAqICgzICogZmFjdG9yaWFsKDIpKSkpPC90ZXh0Pjx0ZXh0IHg9IjAiIHk9IjEyMCIgZm9udC1mYW1pbHk9IkNhc2NhZGlhLCBTZWdvZSBVSSBFbW9qaSxtb25vc3BhY2UiIGZvbnQtc2l6ZT0iMjBweCIgZmlsbD0iIzFlMWUxZSIgdGV4dC1hbmNob3I9InN0YXJ0IiBzdHlsZT0id2hpdGUtc3BhY2U6IHByZTsiIGRpcmVjdGlvbj0ibHRyIiBkb21pbmFudC1iYXNlbGluZT0idGV4dC1iZWZvcmUtZWRnZSI+NiAqICg1ICogKDQgKiAoMyAqICgyICogZmFjdG9yaWFsKDEpKSkpKTwvdGV4dD48dGV4dCB4PSIwIiB5PSIxNDQiIGZvbnQtZmFtaWx5PSJDYXNjYWRpYSwgU2Vnb2UgVUkgRW1vamksbW9ub3NwYWNlIiBmb250LXNpemU9IjIwcHgiIGZpbGw9IiMxZTFlMWUiIHRleHQtYW5jaG9yPSJzdGFydCIgc3R5bGU9IndoaXRlLXNwYWNlOiBwcmU7IiBkaXJlY3Rpb249Imx0ciIgZG9taW5hbnQtYmFzZWxpbmU9InRleHQtYmVmb3JlLWVkZ2UiPjYgKiAoNSAqICg0ICogKDMgKiAoMiAqIDEpKSkpPC90ZXh0Pjx0ZXh0IHg9IjAiIHk9IjE2OCIgZm9udC1mYW1pbHk9IkNhc2NhZGlhLCBTZWdvZSBVSSBFbW9qaSxtb25vc3BhY2UiIGZvbnQtc2l6ZT0iMjBweCIgZmlsbD0iIzFlMWUxZSIgdGV4dC1hbmNob3I9InN0YXJ0IiBzdHlsZT0id2hpdGUtc3BhY2U6IHByZTsiIGRpcmVjdGlvbj0ibHRyIiBkb21pbmFudC1iYXNlbGluZT0idGV4dC1iZWZvcmUtZWRnZSI+NiAqICg1ICogKDQgKiAoMyAqIDIpKSk8L3RleHQ+PHRleHQgeD0iMCIgeT0iMTkyIiBmb250LWZhbWlseT0iQ2FzY2FkaWEsIFNlZ29lIFVJIEVtb2ppLG1vbm9zcGFjZSIgZm9udC1zaXplPSIyMHB4IiBmaWxsPSIjMWUxZTFlIiB0ZXh0LWFuY2hvcj0ic3RhcnQiIHN0eWxlPSJ3aGl0ZS1zcGFjZTogcHJlOyIgZGlyZWN0aW9uPSJsdHIiIGRvbWluYW50LWJhc2VsaW5lPSJ0ZXh0LWJlZm9yZS1lZGdlIj42ICogKDUgKiAoNCAqIDYpKTwvdGV4dD48dGV4dCB4PSIwIiB5PSIyMTYiIGZvbnQtZmFtaWx5PSJDYXNjYWRpYSwgU2Vnb2UgVUkgRW1vamksbW9ub3NwYWNlIiBmb250LXNpemU9IjIwcHgiIGZpbGw9IiMxZTFlMWUiIHRleHQtYW5jaG9yPSJzdGFydCIgc3R5bGU9IndoaXRlLXNwYWNlOiBwcmU7IiBkaXJlY3Rpb249Imx0ciIgZG9taW5hbnQtYmFzZWxpbmU9InRleHQtYmVmb3JlLWVkZ2UiPjYgKiAoNSAqIDI0KTwvdGV4dD48dGV4dCB4PSIwIiB5PSIyNDAiIGZvbnQtZmFtaWx5PSJDYXNjYWRpYSwgU2Vnb2UgVUkgRW1vamksbW9ub3NwYWNlIiBmb250LXNpemU9IjIwcHgiIGZpbGw9IiMxZTFlMWUiIHRleHQtYW5jaG9yPSJzdGFydCIgc3R5bGU9IndoaXRlLXNwYWNlOiBwcmU7IiBkaXJlY3Rpb249Imx0ciIgZG9taW5hbnQtYmFzZWxpbmU9InRleHQtYmVmb3JlLWVkZ2UiPjYgKiAxMjA8L3RleHQ+PHRleHQgeD0iMCIgeT0iMjY0IiBmb250LWZhbWlseT0iQ2FzY2FkaWEsIFNlZ29lIFVJIEVtb2ppLG1vbm9zcGFjZSIgZm9udC1zaXplPSIyMHB4IiBmaWxsPSIjMWUxZTFlIiB0ZXh0LWFuY2hvcj0ic3RhcnQiIHN0eWxlPSJ3aGl0ZS1zcGFjZTogcHJlOyIgZGlyZWN0aW9uPSJsdHIiIGRvbWluYW50LWJhc2VsaW5lPSJ0ZXh0LWJlZm9yZS1lZGdlIj43MjA8L3RleHQ+PC9nPjxnIHN0cm9rZS1saW5lY2FwPSJyb3VuZCI+PGcgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoMTUxLjk5MjE4NzUgMTYuNjgzNTkzNzUpIHJvdGF0ZSgwIDE0Mi4wNzYyMTU0Njc3NjcwNCAxMzMuNDkwMjM0Mzc1KSI+PHBhdGggZD0iTTAgMCBDNjAuMTMgMjAuOTMsIDM3My41OCA4MS4wNywgMzYwLjc1IDEyNS41NyBDMzQ3LjkyIDE3MC4wNiwgLTQuMDMgMjQzLjQxLCAtNzYuOTggMjY2Ljk4IE0wIDAgQzYwLjEzIDIwLjkzLCAzNzMuNTggODEuMDcsIDM2MC43NSAxMjUuNTcgQzM0Ny45MiAxNzAuMDYsIC00LjAzIDI0My40MSwgLTc2Ljk4IDI2Ni45OCIgc3Ryb2tlPSIjZTAzMTMxIiBzdHJva2Utd2lkdGg9IjIiIGZpbGw9Im5vbmUiPjwvcGF0aD48L2c+PGcgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoMTUxLjk5MjE4NzUgMTYuNjgzNTkzNzUpIHJvdGF0ZSgwIDE0Mi4wNzYyMTU0Njc3NjcwNCAxMzMuNDkwMjM0Mzc1KSI+PHBhdGggZD0iTS03Ni45OCAyNjYuOTggTC02NS40MyAyNTcuNDEgTC02Mi4yMiAyNjkuNjcgTC03Ni45OCAyNjYuOTgiIHN0cm9rZT0ibm9uZSIgc3Ryb2tlLXdpZHRoPSIwIiBmaWxsPSIjZTAzMTMxIiBmaWxsLXJ1bGU9ImV2ZW5vZGQiPjwvcGF0aD48cGF0aCBkPSJNLTc2Ljk4IDI2Ni45OCBDLTc0LjEyIDI2NC42MSwgLTcxLjI3IDI2Mi4yNCwgLTY1LjQzIDI1Ny40MSBNLTc2Ljk4IDI2Ni45OCBDLTczLjk1IDI2NC40NywgLTcwLjkyIDI2MS45NiwgLTY1LjQzIDI1Ny40MSBNLTY1LjQzIDI1Ny40MSBDLTY0LjcgMjYwLjIsIC02My45NyAyNjMsIC02Mi4yMiAyNjkuNjcgTS02NS40MyAyNTcuNDEgQy02NC41OCAyNjAuNjcsIC02My43MyAyNjMuOTMsIC02Mi4yMiAyNjkuNjcgTS02Mi4yMiAyNjkuNjcgQy02Ny41NCAyNjguNywgLTcyLjg1IDI2Ny43MywgLTc2Ljk4IDI2Ni45OCBNLTYyLjIyIDI2OS42NyBDLTY3LjkzIDI2OC42MywgLTczLjYzIDI2Ny41OSwgLTc2Ljk4IDI2Ni45OCBNLTc2Ljk4IDI2Ni45OCBDLTc2Ljk4IDI2Ni45OCwgLTc2Ljk4IDI2Ni45OCwgLTc2Ljk4IDI2Ni45OCBNLTc2Ljk4IDI2Ni45OCBDLTc2Ljk4IDI2Ni45OCwgLTc2Ljk4IDI2Ni45OCwgLTc2Ljk4IDI2Ni45OCIgc3Ryb2tlPSIjZTAzMTMxIiBzdHJva2Utd2lkdGg9IjIiIGZpbGw9Im5vbmUiPjwvcGF0aD48L2c+PC9nPjxtYXNrPjwvbWFzaz48L3N2Zz4=\" />\r\n\r\nNote that, in the iterative function, the arrow shape is linear and we can see the state of each variable at each step. In addition, at each iteration of our loop, a calculation is performed and the variables stored in memory are updated. In the recursive function, the arrow shape is exponential and we cannot see the state of all variables in the first half of the processing. In addition, each time the function is executed, more memory needs to be used to store the resulting values of each execution.\r\n\r\nBut what does this mean? In order for JavaScript to calculate the factorial of 6 using the iterative function, the `while` condition is added to the stack, where its calculation is performed, the `result` variable is updated, and then the executed code block of the `while` is removed from the stack. This is done until the while condition is false, that is, until the value of `n` is less than or equal to 1.\r\n\r\nIn the recursive function, each call to the `factorial` function is added to the stack as many times as necessary until the if condition is false, that is, until the value of `n` is less than or equal to 1. This means that, to calculate the factorial of 6, the `factorial` function is added to the stack 6 times before being executed. And that's why, when we try to calculate the factorial of a large number (100,000, for example), we encounter the error `RangeError: Maximum call stack size exceeded`: there is not enough space in the stack to store all the calls to the `factorial` function.\r\n\r\n## Introducing Tail Call Optimization\r\n\r\nAs defined by [Dr. Axel Rauschmayer](https://dr-axel.de/):\r\n\r\n> [...] whenever the last thing a function does is call another function, then this last function does not need to return to its caller. As a consequence, no information needs to be stored on the call stack and the function call is more like a goto (a jump). This type of call is called a _tail call_; not increasing the stack is called tail call optimization (TCO).\r\n\r\nNow, we have discovered that our factorial calculation function is not tail recursive. But how can we make it tail recursive? With the help of another function:\r\n\r\n```javascript\r\nconst factorial = (n) => {\r\n  return factorialHelper(n, 1)\r\n}\r\n\r\nconst factorialHelper = (x, accumulator) => {\r\n  if (x <= 1) {\r\n    return accumulator\r\n  }\r\n\r\n  return factorialHelper(x - 1, x * accumulator)\r\n}\r\n```\r\n\r\nNow, our function is tail recursive: the last thing it does is call a function (and not calculate an expression, as in the first implementation). Now, let's see the substitution model for calculating the factorial of 6 with our new `factorial` function:\r\n\r\n<SVG64 content=\"PHN2ZyB2ZXJzaW9uPSIxLjEiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgdmlld0JveD0iMCAwIDMyMS4zMTY0MDYyNSAyMjguNDIxODc1IiBzdHlsZT0ibWF4LXdpZHRoOiAzMDBweDsiPgogIDxyZWN0IHg9IjAiIHk9IjAiIHdpZHRoPSIzMjEuMzE2NDA2MjUiIGhlaWdodD0iMjI4LjQyMTg3NSIgZmlsbD0iI2ZmZmZmZiI+PC9yZWN0PjxnIHRyYW5zZm9ybT0idHJhbnNsYXRlKDEwIDI2LjQyMTg3NSkgcm90YXRlKDAgMTM0Ljc2NTYyNSA5NikiPjx0ZXh0IHg9IjAiIHk9IjAiIGZvbnQtZmFtaWx5PSJDYXNjYWRpYSwgU2Vnb2UgVUkgRW1vamksIG1vbm9zcGFjZSIgZm9udC1zaXplPSIyMHB4IiBmaWxsPSIjMWUxZTFlIiB0ZXh0LWFuY2hvcj0ic3RhcnQiIHN0eWxlPSJ3aGl0ZS1zcGFjZTogcHJlOyIgZGlyZWN0aW9uPSJsdHIiIGRvbWluYW50LWJhc2VsaW5lPSJ0ZXh0LWJlZm9yZS1lZGdlIj5mYWN0b3JpYWwoNik8L3RleHQ+PHRleHQgeD0iMCIgeT0iMjQiIGZvbnQtZmFtaWx5PSJDYXNjYWRpYSwgU2Vnb2UgVUkgRW1vamksIG1vbm9zcGFjZSIgZm9udC1zaXplPSIyMHB4IiBmaWxsPSIjMWUxZTFlIiB0ZXh0LWFuY2hvcj0ic3RhcnQiIHN0eWxlPSJ3aGl0ZS1zcGFjZTogcHJlOyIgZGlyZWN0aW9uPSJsdHIiIGRvbWluYW50LWJhc2VsaW5lPSJ0ZXh0LWJlZm9yZS1lZGdlIj5mYWN0b3JpYWxIZWxwZXIoNiwgMSk8L3RleHQ+PHRleHQgeD0iMCIgeT0iNDgiIGZvbnQtZmFtaWx5PSJDYXNjYWRpYSwgU2Vnb2UgVUkgRW1vamksIG1vbm9zcGFjZSIgZm9udC1zaXplPSIyMHB4IiBmaWxsPSIjMWUxZTFlIiB0ZXh0LWFuY2hvcj0ic3RhcnQiIHN0eWxlPSJ3aGl0ZS1zcGFjZTogcHJlOyIgZGlyZWN0aW9uPSJsdHIiIGRvbWluYW50LWJhc2VsaW5lPSJ0ZXh0LWJlZm9yZS1lZGdlIj5mYWN0b3JpYWxIZWxwZXIoNSwgNik8L3RleHQ+PHRleHQgeD0iMCIgeT0iNzIiIGZvbnQtZmFtaWx5PSJDYXNjYWRpYSwgU2Vnb2UgVUkgRW1vamksIG1vbm9zcGFjZSIgZm9udC1zaXplPSIyMHB4IiBmaWxsPSIjMWUxZTFlIiB0ZXh0LWFuY2hvcj0ic3RhcnQiIHN0eWxlPSJ3aGl0ZS1zcGFjZTogcHJlOyIgZGlyZWN0aW9uPSJsdHIiIGRvbWluYW50LWJhc2VsaW5lPSJ0ZXh0LWJlZm9yZS1lZGdlIj5mYWN0b3JpYWxIZWxwZXIoNCwgMzApPC90ZXh0Pjx0ZXh0IHg9IjAiIHk9Ijk2IiBmb250LWZhbWlseT0iQ2FzY2FkaWEsIFNlZ29lIFVJIEVtb2ppLCBtb25vc3BhY2UiIGZvbnQtc2l6ZT0iMjBweCIgZmlsbD0iIzFlMWUxZSIgdGV4dC1hbmNob3I9InN0YXJ0IiBzdHlsZT0id2hpdGUtc3BhY2U6IHByZTsiIGRpcmVjdGlvbj0ibHRyIiBkb21pbmFudC1iYXNlbGluZT0idGV4dC1iZWZvcmUtZWRnZSI+ZmFjdG9yaWFsSGVscGVyKDMsIDEyMCk8L3RleHQ+PHRleHQgeD0iMCIgeT0iMTIwIiBmb250LWZhbWlseT0iQ2FzY2FkaWEsIFNlZ29lIFVJIEVtb2ppLCBtb25vc3BhY2UiIGZvbnQtc2l6ZT0iMjBweCIgZmlsbD0iIzFlMWUxZSIgdGV4dC1hbmNob3I9InN0YXJ0IiBzdHlsZT0id2hpdGUtc3BhY2U6IHByZTsiIGRpcmVjdGlvbj0ibHRyIiBkb21pbmFudC1iYXNlbGluZT0idGV4dC1iZWZvcmUtZWRnZSI+ZmFjdG9yaWFsSGVscGVyKDIsIDM2MCk8L3RleHQ+PHRleHQgeD0iMCIgeT0iMTQ0IiBmb250LWZhbWlseT0iQ2FzY2FkaWEsIFNlZ29lIFVJIEVtb2ppLCBtb25vc3BhY2UiIGZvbnQtc2l6ZT0iMjBweCIgZmlsbD0iIzFlMWUxZSIgdGV4dC1hbmNob3I9InN0YXJ0IiBzdHlsZT0id2hpdGUtc3BhY2U6IHByZTsiIGRpcmVjdGlvbj0ibHRyIiBkb21pbmFudC1iYXNlbGluZT0idGV4dC1iZWZvcmUtZWRnZSI+ZmFjdG9yaWFsSGVscGVyKDEsIDcyMCk8L3RleHQ+PHRleHQgeD0iMCIgeT0iMTY4IiBmb250LWZhbWlseT0iQ2FzY2FkaWEsIFNlZ29lIFVJIEVtb2ppLCBtb25vc3BhY2UiIGZvbnQtc2l6ZT0iMjBweCIgZmlsbD0iIzFlMWUxZSIgdGV4dC1hbmNob3I9InN0YXJ0IiBzdHlsZT0id2hpdGUtc3BhY2U6IHByZTsiIGRpcmVjdGlvbj0ibHRyIiBkb21pbmFudC1iYXNlbGluZT0idGV4dC1iZWZvcmUtZWRnZSI+NzIwPC90ZXh0PjwvZz48ZyBzdHJva2UtbGluZWNhcD0icm91bmQiPjxnIHRyYW5zZm9ybT0idHJhbnNsYXRlKDMxOS45MTAxNTYyNSAxMCkgcm90YXRlKDAgLTI0LjQxMDE1NjI1IDk5LjY2NDA2MjUpIj48cGF0aCBkPSJNLTguNTkgMCBDLTguNzcgNzcuNzUsIC04Ljk1IDE1NS41MSwgLTkuMDUgMTk5LjMzIE0tOC41OSAwIEMtOC43MiA1Ny4xMSwgLTguODYgMTE0LjIyLCAtOS4wNSAxOTkuMzMgTS05LjA1IDE5OS4zMyBDLTE3LjI0IDE5OS4yMiwgLTI1LjQ0IDE5OS4xMSwgLTQwLjIzIDE5OC45MSBNLTkuMDUgMTk5LjMzIEMtMjAuOTYgMTk5LjE3LCAtMzIuODcgMTk5LjAxLCAtNDAuMjMgMTk4LjkxIiBzdHJva2U9IiNlMDMxMzEiIHN0cm9rZS13aWR0aD0iMiIgZmlsbD0ibm9uZSI+PC9wYXRoPjwvZz48ZyB0cmFuc2Zvcm09InRyYW5zbGF0ZSgzMTkuOTEwMTU2MjUgMTApIHJvdGF0ZSgwIC0yNC40MTAxNTYyNSA5OS42NjQwNjI1KSI+PHBhdGggZD0iTS00MC4yMyAxOTguOTEgTC0yNi41NSAxOTIuNzUgTC0yNi43MiAyMDUuNDMgTC00MC4yMyAxOTguOTEiIHN0cm9rZT0ibm9uZSIgc3Ryb2tlLXdpZHRoPSIwIiBmaWxsPSIjZTAzMTMxIiBmaWxsLXJ1bGU9ImV2ZW5vZGQiPjwvcGF0aD48cGF0aCBkPSJNLTQwLjIzIDE5OC45MSBDLTM0Ljg5IDE5Ni41MSwgLTI5LjU2IDE5NC4xMSwgLTI2LjU1IDE5Mi43NSBNLTQwLjIzIDE5OC45MSBDLTM2LjMxIDE5Ny4xNSwgLTMyLjM5IDE5NS4zOCwgLTI2LjU1IDE5Mi43NSBNLTI2LjU1IDE5Mi43NSBDLTI2LjU5IDE5Ni4wOSwgLTI2LjY0IDE5OS40MiwgLTI2LjcyIDIwNS40MyBNLTI2LjU1IDE5Mi43NSBDLTI2LjYxIDE5Ny42LCAtMjYuNjggMjAyLjQ0LCAtMjYuNzIgMjA1LjQzIE0tMjYuNzIgMjA1LjQzIEMtMjkuNSAyMDQuMDksIC0zMi4yNyAyMDIuNzUsIC00MC4yMyAxOTguOTEgTS0yNi43MiAyMDUuNDMgQy0zMC4yNyAyMDMuNzIsIC0zMy44MSAyMDIuMDEsIC00MC4yMyAxOTguOTEgTS00MC4yMyAxOTguOTEgQy00MC4yMyAxOTguOTEsIC00MC4yMyAxOTguOTEsIC00MC4yMyAxOTguOTEgTS00MC4yMyAxOTguOTEgQy00MC4yMyAxOTguOTEsIC00MC4yMyAxOTguOTEsIC00MC4yMyAxOTguOTEiIHN0cm9rZT0iI2UwMzEzMSIgc3Ryb2tlLXdpZHRoPSIyIiBmaWxsPSJub25lIj48L3BhdGg+PC9nPjwvZz48bWFzaz48L21hc2s+PC9zdmc+\" />\r\n\r\n[The performance is superior](https://jsben.ch/vOf9P) to our first implementation, although it still doesn't beat the performance of the iterative function. However, we still encounter the error `RangeError: Maximum call stack size exceeded`. But why does this happen? Because, despite our function being tail recursive, current versions of Node.js and browsers ([with the exception of Safari](https://webkit.org/blog/6240/ecmascript-6-proper-tail-calls-in-webkit/)) do not implement Tail Call Optimization (despite its inclusion in the [EcmaScript](https://262.ecma-international.org/6.0/#sec-tail-position-calls) specification since 2015).\r\n\r\nBut how will we solve this problem? With the help of another function, of course! For that, we will rely on the [Trampoline](https://en.wikipedia.org/wiki/Trampoline_(computing)) pattern:\r\n\r\n```javascript\r\nconst trampoline = (fn) => {\r\n  while (typeof fn === 'function') {\r\n    fn = fn()\r\n  }\r\n\r\n  return result\r\n}\r\n```\r\n\r\nOur trampoline function consists of a loop that invokes a function that wraps another function (what we call a [thunk](https://en.wikipedia.org/wiki/Thunk)) until there are no more functions to execute. Let's see how the implementation of our factorial function would look like with the Trampoline pattern:\r\n\r\n```javascript\r\nconst trampoline = (fn) => {\r\n  while (typeof fn === 'function') {\r\n    fn = fn()\r\n  }\r\n\r\n  return fn\r\n}\r\n\r\nconst factorialHelper = (x, accumulator) => {\r\n  if (x <= 1) {\r\n    return accumulator\r\n  }\r\n\r\n  // Now, a function returns another function\r\n  return () => factorialHelper(x - 1, x * accumulator)\r\n}\r\n\r\nconst factorial = (n) => {\r\n  return trampoline(factorialHelper(n, 1))\r\n}\r\n```\r\n\r\nAnd now, we can call our factorial function with a large number, without encountering the error `RangeError: Maximum call stack size exceeded`. Of course, depending on the factorial we want to calculate, we will encounter an Infinity, as it is a very large number (a number greater than Number.MAX_SAFE_INTEGER: 253 - <sup>1</sup>). In this case, we can use [BigInt](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt):\r\n\r\n```javascript\r\nconst trampoline = (fn) => {\r\n  while (typeof fn === 'function') {\r\n    fn = fn()\r\n  }\r\n\r\n  return fn\r\n}\r\n\r\nconst factorialHelper = (x, accumulator) => {\r\n  if (x <= 1) {\r\n    return accumulator\r\n  }\r\n\r\n  return () => factorialHelper(x - 1n, x * accumulator)\r\n}\r\n\r\nconst factorial = (n) => {\r\n  // Converting values to BigInt\r\n  //-------------------------------\\/----------\\/\r\n  return trampoline(factorialHelper(BigInt(n), 1n))\r\n}\r\n```\r\n\r\n## Typing our function\r\n\r\nAnd finally, let's add the necessary types to our factorial function:\r\n\r\n```typescript\r\ntype Thunk = bigint | (() => Thunk)\r\n\r\nconst trampoline = (fn: Thunk) => {\r\n  while (typeof fn === 'function') {\r\n    fn = fn()\r\n  }\r\n\r\n  return fn\r\n}\r\n\r\nconst factorialHelper = (x: bigint, accumulator: bigint): Thunk => {\r\n  if (x <= 1) {\r\n    return accumulator\r\n  }\r\n\r\n  return () => factorialHelper(x - 1n, x * accumulator)\r\n}\r\n\r\nconst factorial = (n: number) => {\r\n  return trampoline(factorialHelper(BigInt(n), 1n))\r\n}\r\n```\r\n\r\n## References\r\n- [What happened to proper tail calls in JavaScript?](https://www.mgmarlow.com/words/2021-03-27-proper-tail-calls-js/)\r\n- [Tail Call Optmization](https://exploringjs.com/es6/ch_tail-calls.html)\r\n- [Limites da recursão em JavaScript, TCO e o pattern Trampoline](http://cangaceirojavascript.com.br/limites-recursao-javascript-tco-e-pattern-trampoline/)\r\n- [What is an Activation object in JavaScript?](https://softwareengineering.stackexchange.com/a/189973/383960)\r\n- [Factorial](https://mathworld.wolfram.com/Factorial.html)\r\n- [Tail Recursion Explained - Computerphile](https://www.youtube.com/watch?v=_JtPhF8MshA)\r\n- [Tail Call Optimization: The Musical!!](https://www.youtube.com/watch?v=-PX0BV9hGZY)\r\n\n",
    "tags": [
      "algorithms",
      "javascript",
      "mathematic",
      "Node.js"
    ],
    "translates": "rc3oq9fakzdn3ad"
  },
  {
    "id": "afekje3ez7b2byc",
    "title": "How to calculate the border-radius of nested elements",
    "slug": "how-to-calculate-the-border-radius-of-nested-elements",
    "locale": "en-US",
    "created": "2023-08-30T18:47:17.057Z",
    "updated": "2023-08-30T18:50:19.490Z",
    "content": "The [`border-radius`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-radius) property allows you to round the edges of an element. Giving the same `border-radius` value to the parent element and child element doesn't result in the best appearance, so how do you calculate the border radius of nested elements?\r\n\r\nCheck out the demo below:\r\n\r\n<CodePen id=\"KKbzrER\" />\r\n\r\nIn the example above, the two circles have the same radius and are inscribed in squares with rounded edges. Note that the radius of the border is the same as the radius of the circle. We want the end of the arc of the circle each edge starts to be coincident with both squares. This can be done in two ways:\r\n\r\n1. Radius of the border of the inner square (R<sub>i</sub>) + spacing between squares (E) = radius of the border of the outer square (R<sub>e</sub>);\r\n2. Outer square border radius (R<sub>e</sub>) - spacing between squares (E) = inner square border radius R<sub>i</sub>.\r\n\r\nNote that the center of the circles inscribed in the squares do not coincide, as well as the end of the border arc. Still, the result is satisfactory.\r\n\r\n## Bonus\r\n\r\nIn this interactive example, made by [Jhey Tompkins](https://jhey.dev/), you can see how this rule applies in practice:\r\n\r\n<CodePen user=\"jh3y\" id=\"KKrYaxx\" />\r\n\r\n## References\r\n\r\n- [@jh3yy](https://twitter.com/jh3yy/status/1688542283602231296)\r\n- [Tip: Perfect nested border radius in CSS](https://www.30secondsofcode.org/css/s/nested-border-radius/)\r\n- [CSS3 border-radius Property](https://www.w3schools.com/cssref/css3_pr_border-radius.asp)\r\n- [CSS Backgrounds and Borders Module Level 3](https://www.w3.org/TR/css-backgrounds-3/#corners)\n",
    "tags": [
      "CSS",
      "HTML"
    ],
    "translates": "jyetft1jka7szdn"
  },
  {
    "id": "pgltwbdkto3gado",
    "title": "The minimum you need to know to test your APIs with CURL",
    "slug": "the-minimum-you-need-to-know-to-test-your-apis-with-curl",
    "locale": "en-US",
    "created": "2023-08-30T18:41:29.529Z",
    "updated": "2024-06-02T00:25:38.664Z",
    "content": "[CURL](https://github.com/curl/curl) is a command-line tool that allows you to transmit data with URL syntax, supporting a myriad of protocols (DICT, FILE, FTP, FTPS, GOPHER, GOPHERS, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, MQTT, POP3, POP3S, RTMP, RTMPS, RTSP, SCP, SFTP, SMB, SMBS, SMTP, SMTPS, TELNET, TFTP, WS and WSS). In this article, I will focus on using CURL to make HTTP requests to APIs, which, at least for me, is the most common use.\r\n\r\n## Installation\r\n\r\nCURL is already installed on most Linux distributions and [recent versions of Windows](https://techcommunity.microsoft.com/t5/containers/tar-and-curl-come-to-windows/ba-p/382409). To check if it's installed, just run the `curl` command in the terminal. If you don't have CURL installed, you can install it with the command `sudo apt install curl` (Ubuntu/Debian) or `sudo yum install curl` (CentOS/Fedora) or `winget install curl` (Windows).\r\n\r\nOh, and as it is common for us to work with REST APIs in web development, another command-line tool that will be useful to us is [`jq`](https://jqlang.github.io/jq/), which serves to format JSON in the terminal. To install `jq`, just run the command `sudo apt install jq` (Ubuntu/Debian) or `sudo yum install jq` (CentOS/Fedora) or `winget install jqlang.jq` (Windows).\r\n\r\n## Our example API\r\n\r\nFor didactic purposes, I will use [DummyJSON](https://dummyjson.com/) as an API.\r\n\r\n## Making a GET request\r\n\r\nTo make a GET request, just run the `curl` command followed by the URL you want to access. For example, to request data for product 1, just run the command `curl https://dummyjson.com/products/1`.\r\n\r\nAnd, to format the output, just add a `| jq` at the end of the command:\r\n\r\n```bash\r\ncurl https://dummyjson.com/products/1 | jq\r\n```\r\n\r\n## Making a POST, PUT, PATCH or DELETE request with JSON in the body\r\n\r\nTo make a POST request, just run:\r\n\r\n```bash\r\ncurl --json '{\"title\": \"New product\"}' https://dummyjson.com/products/add\r\n```\r\n\r\nThe `curl` will take care of adding the headers `Content-Type: application/json` and `Accept: application/json`. If you want to make a `PUT`, `PATCH` or `DELETE` request, add the `-X` option followed by the HTTP method you want to use. For example, to make a `PUT`, run:\r\n\r\n```bash\r\ncurl -X PUT --json '{\"title\": \"New title\"}' https://dummyjson.com/products/1\r\n```\r\n\r\nYou can also send a JSON file instead of typing the JSON in the terminal by putting an @ in front of the file name:\r\n\r\n```bash\r\ncurl --json @arquivo.json https://dummyjson.com/products/add\r\n```\r\n\r\nOr passing data from [_stdin_](https://man.archlinux.org/man/stdin.3.en) (note that I use `@-` instead of `@` to indicate that the data will come from _stdin_):\r\n\r\n```bash\r\ncurl --json @- https://dummyjson.com/products/add < file.json\r\n```\r\n\r\n## Making a request with headers\r\n\r\nTo make a request with headers, just run the `curl` command followed by the URL you want to access, and the `-H` option followed by the header you want to send. So, to send a Bearer Token, you would run the following command:\r\n\r\n```bash\r\ncurl -H \"Authentication: Bearer token\" --json '{\"title\": \"New product\"}' https://dummyjson.com/products/add\r\n```\r\n\r\n## Some Exercises\r\n\r\nJulia Evans published a few exercises to help you become fluent in curl. It should be worth to take a look at [this post](https://jvns.ca/blog/2019/08/27/curl-exercises/) in her blog.\r\n\r\n## References\r\n\r\n- [curl manpage](https://manpages.ubuntu.com/manpages/lunar/en/man1/curl.1.html)\r\n\n",
    "tags": [
      "curl",
      "API",
      "HTTP"
    ],
    "translates": "5ufu9x2h9ilz2jr"
  },
  {
    "id": "pd682cq57ureywz",
    "title": "Creating native modals with the dialog element",
    "slug": "creating-native-modals-with-the-dialog-element",
    "locale": "en-US",
    "created": "2023-08-13T19:29:49.318Z",
    "updated": "2023-08-15T00:22:38.749Z",
    "content": "Using custom dialog elements instead of native browser implementations, such as [`alert`](https://developer.mozilla.org/en-US/docs/Web/API/Window/alert),\r\n[`confirm`](https://developer.mozilla.org/en-US/docs/Web/API/Window/confirm), or [`prompt`](https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt),\r\nhas become the standard for web development for quite some time (popularized by various [jQuery](https://jqueryui.com/dialog/) plugins and by [Bootstrap](https://getbootstrap.com/2.3.2/javascript.html#modals) itself), so that with every new UI library that emerges[^1][^2][^3], it is common for its authors to re-implement a modal with the framework of the moment (which may or may not implement [WAI-ARIA accessibility](https://www.w3.org/WAI/ARIA/apg/patterns/dialog-modal/)).\r\n\r\n[^1]: [Material UI Modal](https://mui.com/material-ui/react-modal/)\r\n[^2]: [Ant Design Modal](https://ant.design/components/modal)\r\n[^3]: [Carbon Design System Modal](https://carbondesignsystem.com/components/modal/usage/#live-demo)\r\n\r\nBut now, with the arrival of the [`<dialog>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog) element in HTML5 (supported by [93.85%](https://caniuse.com/dialog) of browsers in use), it is much easier to create dialogs natively. In this article, we will see how to create a simple modal (and non-modal) dialog with the `<dialog>` element.\r\n\r\n## Understanding the _dialog_ element\r\n\r\nIn the sense employed in user interface development, a **dialog** is a <q>conversation</q> between the system and the user, where the system expects a response from the user to continue. A dialog can be **modal** or **non-modal**. A modal dialog (that is, one that changes the **mode** of interaction of the user with the system) is one that locks the interface, preventing the user from interacting with the rest of the page until it is closed. A non-modal dialog (that is, one that _does not_ change the **mode** of interaction of the user with the system), on the other hand, allows the user to interact with the rest of the page while the dialog is open.\r\n\r\nThe simplest way to put a non-modal dialog on the screen is as follows:\r\n\r\n```html\r\n<dialog open>\r\n  <p>Olá, mundo!</p>\r\n  <form method=\"dialog\">\r\n    <button>Fechar</button>\r\n  </form>\r\n</dialog>\r\n```\r\n\r\nNote the form, on line 5, with the _dialog_ method. It is this form that sends actions to the `dialog`. It will be displayed like this:\r\n\r\n<CodePen id=\"zYMgBOz\" />\r\n\r\nWhat makes the example above a non-modal dialog is the use of the `open` attribute (line 1), which also makes it unable to be closed with the `Esc` key. It's possible to create a non-modal dialog using the JavaScript API:\r\n\r\n<CodePen id=\"BaGXqjx\" />\r\n\r\nIn order for it to behave like a modal, it is necessary to open it through its JavaScript API, as we will see next.\r\n\r\n<CodePen id=\"VwVojZB\" />\r\n\r\nThis time, we open and close the modal with JavaScript and put the form result in the `output` element when the modal is closed. Read the code carefully and try to understand what is happening.\r\n\r\n## Styling the modal\r\n\r\nThe `dialog` element can (of course), be styled like any other HTML element. However, note that, to style the overlay (the dark background behind the modal), it is necessary to use the `::backdrop` selector:\r\n\r\n<CodePen id=\"gOQVMYE\" />\r\n\r\n## Polyfill\r\n\r\nIf you want to use `dialog` and don't have compatibility issues in older browsers, you can use this [polyfill](https://github.com/GoogleChrome/dialog-polyfill).\r\n\r\n<hr />\r\n\r\n<h3>References</h3>\r\n\r\n- [Dialog](https://web.dev/learn/html/dialog/)\r\n- [Dialog](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog)\r\n- [Modal & Nonmodal Dialogs: When (& When Not) to Use Them](https://www.nngroup.com/articles/modal-nonmodal-dialog/)\r\n\n",
    "tags": [
      "html",
      "javascript",
      "tutorial"
    ],
    "translates": "066kuym52jk3nbp"
  },
  {
    "id": "j5ouuw7zm51z2ts",
    "title": "Using fetch with TypeScript",
    "slug": "using-fetch-with-typescript",
    "locale": "en-US",
    "created": "2023-06-02T12:19:46.717Z",
    "updated": "2023-06-04T19:57:40.482Z",
    "content": "Since [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)) is pratically [universally supported](https://caniuse.com/?search=fetch) on the most used web browsers, we may safely drop the use [Axios](https://axios-http.com/) and other similar libraries in favor of `fetch`. In this article, I'll create a little wrapper for `fetch` that adds some conveniences to improve the developer experience.\r\n\r\n## The code\r\n\r\nFirst, I will create a base function from where all the other shall be derived:\r\n\r\n```typescript\r\n// Extends the error class to throw HTTP Errors (any response with status > 299)\r\nclass HTTPError extends Error {}\r\n\r\n//            A generic type to type the response\r\n// -----------\\/\r\nconst query = <T = unknown>(url: RequestInfo | URL, init?: RequestInit) =>\r\n  fetch(url, init).then((res) => {\r\n    if (!res.ok)\r\n      throw new HTTPError(res.statusText, { cause: res })\r\n\r\n    return res.json() as Promise<T> // <--- Applying the generic type above\r\n  })\r\n```\r\n\r\nIn the code above, we:\r\n\r\n1. Created a new `HTTPError` class, in order to throw [HTTP Errors](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status) as they appear;\r\n2. Use a [generic type](https://www.typescriptlang.org/docs/handbook/2/generics.html) in order to be able to type the response of the request.\r\n\r\nNow, let's extend the query function to enable us to serialize and send data on our requests:\r\n\r\n```typescript\r\nconst makeRequest\r\n  // -----------\\/ RequestInit['method'] is a union of all the possible HTTP methods\r\n  = (method: RequestInit['method']) =>\r\n    //     | Those two generic types enables us to type the\r\n    // \\/--  data input (TBody) and output (TResponse) of the function.\r\n    <TResponse = unknown, TBody = Record<string, unknown>>(url: RequestInfo | URL, body: TBody) =>\r\n      query<TResponse>(url, {\r\n        method,\r\n        body: JSON.stringify(body), // <-- JSON Stringify any given object\r\n      })\r\n```\r\n\r\nIn the code above, we:\r\n\r\n1. We build a [closure](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures) that, first, receive the method we want to call and then returns a function where we pass the `url` and the `body` (which is, by default, *JSON-stringified*) of the request.\r\n\r\nAt this point, we can use our newly created functions like this:\r\n\r\n```typescript\r\n// Adding type for the Product entity\r\ntype Product = {\r\n  id: number\r\n  title: string\r\n  description: string\r\n  price: number\r\n  discountPercentage: number\r\n  rating: number\r\n  stock: number\r\n  brand: string\r\n  category: string\r\n  thumbnail: string\r\n  images: string[]\r\n}\r\n\r\n// Getting a single product\r\nconst product = await query<Product>('https://dummyjson.com/products/1')\r\nconsole.log(product)\r\n\r\n// Creates a function that makes POST requests\r\nconst post = makeRequest('POST')\r\n\r\n// Adding a new product\r\nconst newProduct = await post<Product, Omit<Product, 'id'>>('https://dummyjson.com/products', {\r\n  title: 'New Product',\r\n  description: 'This is a new product',\r\n  price: 100,\r\n  discountPercentage: 0,\r\n  rating: 0,\r\n  stock: 0,\r\n  brand: 'New Brand',\r\n  category: 'New Category',\r\n  images: [],\r\n  thumbnail: '',\r\n})\r\n\r\nconsole.log(newProduct)\r\n\r\n```\r\n\r\nFully functional, but not very \"ergonomic\". I believe that our code should also be able to accept a base URL for all the requests, make it easier to add things on the header (like an [authorization token](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Authorization)) and an easy way to make [`PATCH`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PATCH), [`PUT`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PUT) and [`DELETE`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/DELETE) requests.\r\n\r\nLet's refactor the code above in order to make it easy to add a base URL and pass a common header to all requests:\r\n\r\n```typescript\r\nimport { getToken } from 'my-custom-auth'\r\n\r\nclass HTTPError extends Error {}\r\n\r\nconst createQuery =\r\n  (baseURL: RequestInfo | URL = '', baseInit?: RequestInit) =>\r\n    <T = unknown>(url: RequestInfo | URL, init?: RequestInit) =>\r\n      fetch(`${baseURL}${url}`, { ...baseInit, ...init }).then((res) => {\r\n        if (!res.ok)\r\n          throw new HTTPError(res.statusText, { cause: res })\r\n\r\n         return res.json() as Promise<T>\r\n       })\r\n\r\n// This is the function where we define our base URL and headers\r\nconst query = createQuery(\r\n  'https://dummyjson.com',\r\n  {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${getToken()}`, // If you need to add a token to the header, you can do it here.\r\n    },\r\n  })\r\n\r\n\r\nconst makeRequest = (method: RequestInit['method']) =>\r\n  <TResponse = unknown, TBody = Record<string, unknown>>(url: RequestInfo | URL, body: TBody) =>\r\n    query<TResponse>(url, {\r\n      method,\r\n      body: JSON.stringify(body),\r\n     })\r\n\r\nexport const api = {\r\n  get: query,\r\n  post: makeRequest('POST'),\r\n  delete: makeRequest('DELETE'),\r\n  put: makeRequest('PUT'),\r\n  patch: makeRequest('PATCH'),\r\n}\r\n```\r\n\r\nIn the code above, I:\r\n\r\n1. Created a `createQuery` function, a closure where I can set a default [`url`](https://developer.mozilla.org/pt-BR/docs/Web/API/URL) and `init` parameters;\r\n2. Created a new `query` function, where I use the `createQuery` function to define the base URL and the default parameters that all requests should have (note the dummy `getToken` function that adds a [Bearer Token](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication) to each request);\r\n3. In the end, I export the `api` object all the commonly used function to make requests.\r\n\r\nYou may want to return the body of a request that returned an error, like, for example, when your backend returns the standardized [problem details](https://datatracker.ietf.org/doc/html/rfc7807). So, the refactored code would be:\r\n\r\n```typescript\r\nimport { getToken } from 'my-custom-auth'\r\n\r\n// Extends the return of the HTTPError class\r\nclass HTTPError extends Error {\r\n  readonly response: any;\r\n  readonly status: number;\r\n  readonly statusText: string;\r\n\r\n  constructor(status: number, statusText: string, response: any) {\r\n    super(statusText);\r\n    this.status = status;\r\n    this.statusText = statusText;\r\n    this.response = response;\r\n  }\r\n}\r\n\r\nconst createQuery =\r\n  (baseURL: RequestInfo | URL = '', baseInit?: RequestInit) =>\r\n    <TResponse = unknown>(url: RequestInfo | URL, init?: RequestInit) =>\r\n      fetch(`${baseURL}${url}`, { ...baseInit, ...init }).then(async (res) => {\r\n        // Now, we get the JSON response early\r\n        const response = await res.json()\r\n\r\n        if (!res.ok)\r\n          throw new HTTPError(res.status, res.statusText, response);\r\n\r\n         return response as TResponse\r\n       })\r\n\r\n// In this function, we define our base URL and headers.\r\nconst query = createQuery(\r\n  'https://dummyjson.com',\r\n  {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${getToken()}`, // If you need to add a token to the header, you can do it here.\r\n    },\r\n  })\r\n\r\n\r\nconst makeRequest = (method: RequestInit['method']) =>\r\n  <TResponse = unknown, TBody = Record<string, unknown>>(url: RequestInfo | URL, body: TBody) =>\r\n    query<TResponse>(url, {\r\n      method,\r\n      body: JSON.stringify(body),\r\n     })\r\n\r\nexport const api = {\r\n  get: query,\r\n  post: makeRequest('POST'),\r\n  delete: makeRequest('DELETE'),\r\n  put: makeRequest('PUT'),\r\n  patch: makeRequest('PATCH'),\r\n}\r\n```\r\n\r\nAnd now, you can use your new wrapper around fetch like this:\r\n\r\n```typescript\r\ntype Product = {\r\n  id: number\r\n  title: string\r\n  description: string\r\n  price: number\r\n  discountPercentage: number\r\n  rating: number\r\n  stock: number\r\n  brand: string\r\n  category: string\r\n  thumbnail: string\r\n  images: string[]\r\n}\r\n\r\n// GET https://dummyjson.com/products/1\r\napi\r\n  .get<Product>('/products/1')\r\n  .then(console.log)\r\n  .catch((err) => {\r\n    if (err instanceof HTTPError) {\r\n      // Handle HTTP Errors\r\n      console.error('HTTPError', err);\r\n    }\r\n\r\n    if (err instanceof SyntaxError) {\r\n      // Handle error parsing of the response\r\n      console.error('SyntaxError', err);\r\n    }\r\n\r\n    console.error('Other errors', err);\r\n});\r\n```\r\n\r\n## Final thoughts\r\n\r\nThe code above is not full-featured as [Axios](https://axios-http.com/), [redaxios](https://github.com/developit/redaxios), [ky](https://github.com/sindresorhus/ky) or [wretch](https://github.com/elbywan/wretch), but, most of the time, it is all need when I'm working with React using [SWR](https://swr.vercel.app/) or [TanStack Query](https://tanstack.com/query/latest) (and on the backend too). Give me your thoughts about the code and show me your improvements (if you want). You can access this code on this [gist](https://gist.github.com/DouglasdeMoura/59ce418672d0e33dda7056b382b01de9).\n",
    "tags": [
      "typescript",
      "javascript"
    ],
    "translates": "k9f6b2e2nioulc6"
  },
  {
    "id": "l63ql849ju0fg4l",
    "title": "How to push an empty commit on Git?",
    "slug": "how-to-push-an-empty-commit-on-git",
    "locale": "en-US",
    "created": "2023-01-13T21:03:48.079Z",
    "updated": "2023-01-13T21:03:48.079Z",
    "content": "Have you ever had to run a [CI/CD pipeline](https://www.redhat.com/pt-br/topics/devops/what-cicd-pipeline) that is triggered by a commit, when\r\nthere is no code changes to be commited?\r\n\r\nWell, just use the command below:\r\n\r\n```bash\r\ngit commit --allow-empty -m \"ci: trigger pipeline with an empty commit\"\r\n```\r\n\r\nAnd then, just push the commit to the remote repository:\r\n\r\n\r\n```bash\r\ngit push\r\n```\r\n\r\nThat's it!\r\n\n",
    "tags": [
      "Git"
    ],
    "translates": "e62l4z2ckms6roz"
  },
  {
    "id": "l1ko9m5j8svvm88",
    "title": "New year, new blog (or how I created this blog for 2023)",
    "slug": "new-year-new-blog-or-how-i-created-this-blog-for-2023",
    "locale": "en-US",
    "created": "2023-01-01T18:29:53.355Z",
    "updated": "2023-08-12T13:31:07.448Z",
    "content": "New year, new blog! After delaying the publication of my blog for a long time, I finally finished developing it using [Next.js](https://nextjs.org/), [PocketBase](https://pocketbase.io/), and [Mantine](https://mantine.dev/). Want to know why I chose these tools? Then, keep reading here with me.\r\n\r\nI've been creating blogs for a long time (since 2007). I started with Blogger, but then I migrated to WordPress. And that's when I started to be interested in Linux and programming. I spent a lot of time creating themes, customizing plugins, reading documentation, and translating themes and plugins for WordPress. And, although WordPress is an excellent CMS for those who just want to publish a website as quickly as possible, this time I wanted something more personalized, containing all the features I would like to have and nothing more. From there, I started researching.\r\n\r\nI tried several CMSs ([Directus](https://directus.io/), [KeystoneJS](https://keystonejs.com/),\r\n[Strapi](https://strapi.io/) and [Cockpit](https://getcockpit.com/)), but what I found most simple to meet my need was [PocketBase](https://pocketbase.io/), mainly because I intended to self-host my solution. The other CMSs are great, but when you're a team of one, you have to choose the right tools. And what's easier for one person to manage than an SQLite database? PocketBase already exposes database updates in real time with SSE, provides authentication and file management (with integration with S3), SDK for JavaScript and Flutter, and can even be used as a framework. All this within a small binary written in Go (if you want to know more about PocketBase, [read the documentation](https://pocketbase.io/docs/) and watch this video from [FireShip](https://www.youtube.com/watch?v=Wqy3PBEglXQ), where he shows how to create a real-time chat system with PocketBase). And finally, in order to have real-time backups of my SQLite database and send them to S3, I use [Litestream](https://litestream.io/). Well, having made the choice for the backend, let's move on to the frontend.\r\n\r\nI tried [Astro](https://astro.build/) (which is excellent!) and [Remix](https://remix.run/), but I ended up choosing Next.js, mainly because of the Vercel image generation library, which I use to generate images of the post, like this one:\r\n\r\n<img src=\"https://douglasmoura.dev/api/v1/og?ok\" alt=\"The job that's never started as takes longest to finish\" />\r\n\r\nAnd here we come to the choice of what I would use to create the styles of the blog. In recent years, I styled React applications with [CSS Modules](https://github.com/css-modules/css-modules), [Styled Components](https://styled-components.com/), [Stitches](https://stitches.dev/), [Tailwind](https://tailwindcss.com/) and [Chakra UI](https://chakra-ui.com/). I even stated to create a Design System with Stitches and Tailwind, but create an entire Design System all by myself would take a long time, so, I decided to take the shorter route.\r\n\r\nI have tried a few libraries until I found [Mantine](https://mantine.dev/), which is an excellent library packaged with everything I wanted to use.\r\nFrom there, the work consisted of implementing the blog with the basic initial features:\r\n\r\n- [Incremental Static Regeneration](https://nextjs.org/docs/basic-features/data-fetching/incremental-static-regeneration) of posts;\r\n - Form validation with [Zod](https://github.com/colinhacks/zod);\r\n - Nested comment system with anti-spam verification provided by [Akismet](https://akismet.com/);\r\n - Display of commentator avatars with [Gravatar](http://pt.gravatar.com/);\r\n - SVG Favicon with light/dark mode;\r\n - I18n (Portuguese and English).\r\n\r\nWith all that ready, I changed the canonical URLs of my articles on [Dev.to](https://dev.to/douglasdemoura) to point to the new URLs and finally published my blog.\r\n\r\nOf course, if you're reading this on my blog now, you'll see that an important feature is still missing: search. I'll be studying possible solutions for this in the coming days, but I'll already let you know that you can preview the functionality by pressing the <kbd>/</kbd> key on any page.\r\n\r\nHappy 2023, everyone 🎉.\n",
    "tags": [
      "designsystem",
      "webdev",
      "programming"
    ],
    "translates": "6cotdaubg05n32i"
  },
  {
    "id": "i9fkingsi8pcbqk",
    "title": " Introduction to GraphQL",
    "slug": "introduction-to-graphql",
    "locale": "en-US",
    "created": "2022-11-17T15:00:00.000Z",
    "updated": "2022-12-29T14:51:23.352Z",
    "content": "[GraphQL](https://graphql.org/) is a query language for APIs and a runtime for fulfilling those queries with your existing data, developed by Facebook in 2012 and open sourced in 2015. The goal was to create a query language that allowed fine-grained control over the needed data a client can request to an API server.\r\n\r\nA GraphQL service is created by defining **types** and **fields** to those types in a **schema**. A commom way to defining the schema of your GraphQL service is through the GraphQL Schema Definition Language (SDL).\r\n\r\nIn this article, I'll show how to create a GraphQL schema compliant with the [Relay GraphQL Server](https://relay.dev/docs/guides/graphql-server-specification/) specification.\r\n\r\n## Defining your schema in GraphQL\r\n\r\nA GraphQL schema should informe the users about all the types and objects that can be queried and mutated on the graph. GraphQL even provides a feature to query metadata about those types and objects, which can be used to document the GraphQL.\r\n\r\nLet's define a simple schema using GraphQL SDL (Schema Definition Language):\r\n\r\n```graphql\r\n\"\"\"\r\nSerialize and validate JavaScript dates.\r\n\"\"\"\r\nscalar Date\r\n\r\n\"\"\"\r\nNode interface\r\n\"\"\"\r\ninterface Node {\r\n  id: ID!\r\n}\r\n\r\n\"\"\"\r\nPriority level\r\n\"\"\"\r\nenum Priority {\r\n  LOW\r\n  MEDIUM\r\n  HIGH\r\n}\r\n\r\n\"\"\"\r\nA task that the user should complete\r\n\"\"\"\r\ntype Task implements Node {\r\n  \"Task ID\"\r\n  id ID! # ID is a GraphQL special type for IDs.\r\n  \"Task title\"\r\n  title String!\r\n  \"Task creation date\"\r\n  created: Date!\r\n  \"Task modification date\"\r\n  modified: Date\r\n  priority: Priority!\r\n}\r\n\r\n\"\"\"\r\nNeeded input data to add a new task.\r\n\"\"\"\r\ninput AddTaskInput {\r\n  title: String!\r\n  priority: Priority\r\n}\r\n\r\ntype Query {\r\n  \"Get a task by ID\"\r\n  task(id: ID!): Task\r\n}\r\n\r\ntype Mutation {\r\n  addTask(input: AddTaskInput): Task\r\n}\r\n```\r\n\r\n1. First we define a [custom Date scalar](https://graphql.org/learn/schema/#scalar-types) that should validate and serialize Date objects;\r\n2. We define a `Node` interface. I'll explain more on why I'm defining this interface the next topic;\r\n2. We define an [enumeration type](https://graphql.org/learn/schema/#enumeration-types) to define the valid priority status of a task;\r\n3. We create our `Task` type with all the field it should contain. Notice that all field with the exclamation mark at the end are obligatory;\r\n4. We add an input called `AddTaskInput` that defines the obligatory data to add a new `Task`;\r\n5. In the Query type (which is a GraphQL reserved type), we define what queries are available from our root object;\r\n6. In the Mutation type (which is a GraphQL reserved type), we define which operations to alter our data are available. Such operations are called [mutations](https://graphql.org/learn/queries/#mutations).\r\n\r\nNotice that, in GraphQL, comments between quotes serve as documentation (it'll be parsed and displayed in your GraphiQL web documentation interface), while the comments that start with `#` are ignored.\r\n\r\n## Querying your data in GraphQL\r\n\r\nTipically, you'd query a GraphQL server like this:\r\n\r\n```graphql\r\n{\r\n  task(id: \"2\") {\r\n    title\r\n  }\r\n}\r\n```\r\n\r\nWhich would return the following, in JSON format:\r\n\r\n```json\r\n{\r\n  \"data\": {\r\n    \"task\": {\r\n      \"title\": \"Write GraphQL tutorial\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nIn the query above, we started with a special \"root\" object, from where we select the `task` field with the id equals to `2` Then, we select the `title` field from the `task` object. But, if no task has an id equals to 2? In this case, our response would be:\r\n\r\n```json\r\n{\r\n  \"data\": {\r\n    \"task\": null\r\n  }\r\n}\r\n```\r\n\r\nOr, in case of a error, we would receive this response:\r\n\r\n\r\n```json\r\n{\r\n  \"data\": {\r\n    \"task\": null\r\n  },\r\n  \"errors\": [\r\n    {\r\n      \"message\": \"Internal server error.\"\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nYou may want rename a field before using your data. Well, you can create your [aliases](https://graphql.org/learn/queries/#aliases) just like this:\r\n\r\n```graphql\r\n{\r\n  todo: task(id: \"2\") {\r\n    name: title\r\n  }\r\n}\r\n```\r\n\r\nAnd that would be the return:\r\n\r\n```json\r\n{\r\n  \"data\": {\r\n    \"todo\": {\r\n      \"name\": \"Write GraphQL tutorial\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nGraphQL also provides the feature of create [query fragments](https://graphql.org/learn/queries/#fragments) and setting up  [directives](https://graphql.org/learn/queries/#directives) to query your data. I'll need to add more complexity to our current schema in order to explain that, so, for while, let's move to the next topic.\r\n\r\n## The Relay GraphQL Server specification\r\n\r\nDespite you may not want to use [Relay](https://relay.dev/) (or even React) to consume your GraphQL data, their specification is very useful and provides a common ground of what developers should expect from a GraphQL server.\r\n\r\nRemember that `Node` interface we defined above? Its purpose is to provide a [global object identification](https://graphql.org/learn/global-object-identification/) for all the GraphQL nodes in our server. Therefore, a GraphQL client can handle re-fetching and caching in a more standardized way. Notice that each ID must be globally unique on your application.\r\n\r\nAs the `Node` interface will be used for all objects in our server, GraphQL provides a reusable unit called [fragment](https://graphql.org/learn/queries/#fragments). Now, let's add a new way the query nodes on our schema:\r\n\r\n```graphql\r\n# ...\r\n\r\ntype Query {\r\n  \"Get a node by ID\"\r\n  node(id: ID!): Node\r\n}\r\n\r\n# ...\r\n```\r\n\r\nNotice that the `task` query was removed, as it is no more needed. And now, we will re-do our query using a fragment:\r\n\r\n```graphql\r\n# We name the query and pass a variable\r\n# to improve the development experience.\r\nquery getTask(id: ID!) {\r\n  node(id: $id) {\r\n    ...taskFields\r\n  }\r\n}\r\n\r\nfragment taskFields on Task {\r\n  title\r\n}\r\n```\r\n\r\nAnd now, we will change our schema to comply with the Relay GraphQL Server specification. Take some time to read the comments in order to understand what is being done here.\r\n\r\n```graphql\r\n\"\"\"\r\nSerialize and validate JavaScript dates.\r\n\"\"\"\r\nscalar Date\r\n\r\n\"\"\"\r\nNode interface\r\n\"\"\"\r\ninterface Node {\r\n  id: ID!\r\n}\r\n\r\n\"\"\"\r\nPriority level\r\n\"\"\"\r\nenum Priority {\r\n  LOW\r\n  MEDIUM\r\n  HIGH\r\n}\r\n\r\n\"\"\"\r\nA task that the user should complete\r\n\"\"\"\r\ntype Task implements Node {\r\n  \"Task ID\"\r\n  id ID! # ID is a GraphQL special type for IDs.\r\n  \"Task title\"\r\n  title String!\r\n  \"Task creation date\"\r\n  created: Date!\r\n  \"Task modification date\"\r\n  modified: Date\r\n  priority: Priority!\r\n}\r\n\r\n\"\"\"\r\nDefine an edge of the task,\r\ncontaining a node and a pagination cursor.\r\n\"\"\"\r\ntype TaskEdge {\r\n  cursor: String!\r\n  node: Task\r\n}\r\n\r\n\"\"\"\r\nDefine a connection between the\r\ntask edges, including the PageInfo\r\nobject for pagination info.\r\n\"\"\"\r\ntype TaskConnection {\r\n  edges: [TaskEdge] # Yes, we use brackets to define arrays in GraphQL\r\n  pageInfo: PageInfo!\r\n}\r\n\r\n\"\"\"\r\nProvides pagination info\r\nfor a cursor-based pagination\r\n\"\"\"\r\ntype PageInfo {\r\n  hasNextPage: Boolean!\r\n  hasPreviousPage: Boolean!\r\n  startCursor: String\r\n  endCursor: String\r\n}\r\n\r\n\"\"\"\r\nNeeded input data to add a new task.\r\n\"\"\"\r\ninput AddTaskInput {\r\n  title: String!\r\n  priority: Priority\r\n}\r\n\r\ntype Query {\r\n  node(id: ID!): Node\r\n  tasks(\r\n    first: Int, # The amount of tasks requested\r\n    after: String # Cursor to mark the point\r\n  ): TaskConnection\r\n}\r\n\r\ntype Mutation {\r\n  addTask(input: AddTaskInput): Task\r\n}\r\n```\r\n\r\nAt this point, the metaphor of [graphs](https://en.wikipedia.org/wiki/Graph_(discrete_mathematics)) used here should be very clear. Each **edge** of your graph has a node and a **connection** of edges has a collection of nodes that can be paginated. Note that, in this specification, is expected that you implement a [cursor based pagination](https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination), rather than a [offset pagination](https://www.prisma.io/docs/concepts/components/prisma-client/pagination#offset-pagination) (follow the previous link to have more information about their differences.\r\n\r\nAnd that's all we need to comply with the [Relay GraphQL Server Specification](https://relay.dev/docs/guides/graphql-server-specification/).\r\n\r\nIn the next article, I'll implement a GraphQL server using all the concepts that we learned here.\r\n\r\nSource:\r\n\r\n[GraphQL](https://graphql.org/)\r\n\n",
    "tags": [
      "graphql",
      "webdev"
    ],
    "translates": null
  },
  {
    "id": "wcz61fkqkj5y6se",
    "title": "What is a first-class citizen in computer science?",
    "slug": "what-is-a-first-class-citizen-in-computer-science",
    "locale": "en-US",
    "created": "2022-10-08T15:00:00.000Z",
    "updated": "2022-12-29T14:51:27.174Z",
    "content": "In computer science, a **first-class citizen** is an entity that supports all operations available to other entities. Some of the available operations are:\r\n\r\n- They may be named by variables;\r\n- They may be passed as arguments to procedures;\r\n- They may be returned as the results of procedures;\r\n- They may be included in data structures.\r\n\r\nIt was the British computer scientist Christopher Strachey (1916-1975) [who first](https://link.springer.com/article/10.1023/A:1010052305354) coined this notion of first-class citizen status of elements in a programming language in the 1960s.\r\n\r\nIn JavaScript, for example, functions are first-class citizens, as all of the operations cited above can be applied to them. Let's see some examples:\r\n\r\n**A simple function definition in JavaScript**\r\n\r\n```javascript\r\nfunction sum(a, b) {\r\n  return a + b\r\n}\r\n```\r\n\r\n**Assigning a constant to a function**\r\n\r\n```javascript\r\nconst sum = (a, b) => a + b\r\n\r\n// or\r\n// \r\n// const sum = function (a, b) {\r\n//   a + b\r\n// }\r\n```\r\n\r\n**Passing a function as an argument**\r\n\r\n```javascript\r\nfunction sum(a, b, callback) {\r\n  const result = a + b\r\n\r\n  if (typeof callback === 'function') {\r\n    callback(result) // pass the result as an argument of `callback`\r\n  }\r\n\r\n  return result\r\n}\r\n\r\n//        Pass `console.log` as the callback function\r\n// -------\\/\r\nsum(2, 2, console.log) // => 4\r\n```\r\n\r\n**Return a function**\r\n```javascript\r\nfunction sum(a, b, callback) {\r\n  const result = a + b\r\n\r\n  if (callback) {\r\n    return () => callback(result)\r\n  }\r\n\r\n  return result\r\n}\r\n\r\n//            The callback is the sum of the result with 2.\r\n// ------------------\\/\r\nconst fn = sum(2, 2, (result) => sum(2, result))\r\n//    ^---- Store the returned function in a variable\r\n\r\n//          Execute the function\r\n// ---------\\/\r\nconsole.log(fn()) // => 6\r\n```\r\n\r\n**Including a function in a data structure**\r\n\r\n```javascript\r\n// Store the basic operations in an object\r\nconst operations = {\r\n  sum: (a, b) => a + b,\r\n  sub: (a, b) => a - b,\r\n  mul: (a, b) => a * b,\r\n  div: (a, b) => a / b,\r\n}\r\n```\n",
    "tags": [
      "javascript",
      "computerscience",
      "programming",
      "beginners"
    ],
    "translates": null
  },
  {
    "id": "2jd9yuw0klpgymp",
    "title": "What is a RPC (Remote Procedure Call)?",
    "slug": "what-is-a-rpc-remote-procedure-call",
    "locale": "en-US",
    "created": "2022-10-07T15:00:00.000Z",
    "updated": "2022-12-29T14:51:32.038Z",
    "content": "A **remote procedure call** (RPC) is a mechanism of communication between two computational environments, where one can be identified as a client, while the other can be identified as a server.\r\n\r\nFrom the client's point of view, the RPC is just a matter of calling a function with the desired arguments and await for the response, in order to continue the program's execution.\r\n\r\n![Diagram on how a RPC (remote procedure call) works](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p3733ruz3n51tadloaaq.png)\r\n\r\nThus, using an RPC allows one programmer to distribute the system, according to their needs.\r\n\r\n**References:**\r\n\r\n- [RPC Vs Simple Procedure Call - Georgia Tech - Advanced Operating Systems](https://www.youtube.com/watch?v=gr7oaiUsxSU)\r\n- [How RPC works](https://learn.microsoft.com/en-us/windows/win32/rpc/how-rpc-works)\r\n- [Remote Procedure Calls (RPC)](https://users.cs.cf.ac.uk/Dave.Marshall/C/node33.html)\r\n- [Introduction to RPC Programming](https://web.archive.org/web/20030404113118/http://techpubs.sgi.com/library/tpl/cgi-bin/getdoc.cgi?coll=0650&db=bks&srch=&fname=/SGI_Developer/IRIX_NetPG/sgi_html/ch04.html)\r\n- [Building an end-to-end typesafe API — without GraphQL](https://colinhacks.com/essays/painless-typesafety)\n",
    "tags": [
      "programming",
      "computerscience",
      "rpc",
      "beginners"
    ],
    "translates": null
  },
  {
    "id": "fccw7a1zbkshukm",
    "title": "Use GitHub actions to publish your package on NPM",
    "slug": "use-github-actions-to-publish-your-package-on-npm",
    "locale": "en-US",
    "created": "2022-10-04T15:00:00.000Z",
    "updated": "2022-12-29T14:51:36.616Z",
    "content": "Recently, I created a package with the [ESLint](https://eslint.org) settings I like to use in my React projects, as I was tired of always having to configure it when I start new React projects. Publishing a NPM package is just a matter of running `npm publish` on the directory of your package (considering, of course, that you already have an NPM account and is authenticated on your terminal). But I wanted to automatize this publishing everytime I created a new release.\r\n\r\nIn order to do that, I used the following GitHub Action:\r\n\r\n```yaml\r\n# File: .github/workflows/npm-publish.yml\r\n\r\n# This workflow will publish a package to NPM when a release is created\r\n# For more information see: https://help.github.com/actions/language-and-framework-guides/publishing-nodejs-packages\r\n\r\nname: Publish Package to npmjs\r\n\r\non:\r\n  release:\r\n    types: [created]\r\n\r\njobs:\r\n  build:\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      - uses: actions/checkout@v3\r\n      - uses: actions/setup-node@v3\r\n        with:\r\n          node-version: 16\r\n          registry-url: https://registry.npmjs.org/\r\n      - run: npm publish\r\n        env:\r\n          NODE_AUTH_TOKEN: ${{secrets.NODE_AUTH_TOKEN}}\r\n```\r\n\r\nIf you read the YAML file above (that you should put on the `.github/workflows/npm-publish.yml` directory of your git repository), you should have noted that the environment variable `NODE_AUTH_TOKEN` should be defined. Create a new automation access token on the control panel of NPM:\r\n\r\n\r\n1. Access your NPM account and click in \"Access tokens\":\r\n![Access tokens on NPM](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hddbdiev3xhhrl0s09km.png)\r\n\r\n2. Name your new access token and select the \"Automation\" type for it:\r\n\r\n\r\n![Creating access token on NPM](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4oect8iqd17igcbnrrg1.png)\r\n\r\n3. Go to your GitHub repository, click in \"Settings > Secrets > Actions > New repository secret\", name it as NODE_AUTH_TOKEN and paste the access token you just got from NPM:\r\n\r\n\r\n![Create a new secret on the GitHub repository](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wv7pw3j8elyjeoaeehif.png)\r\n\r\n4. Create a new release for your package. This should trigger our GitHub Action and publish to NPM.\r\n\r\n\r\n![Creating a new release on GitHub](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/31fsgle783ujl75stld1.png)\n",
    "tags": [
      "javascript",
      "typescript",
      "npm"
    ],
    "translates": null
  },
  {
    "id": "x09m6ctgj8r7ebz",
    "title": "Create beautiful placeholders for your images ",
    "slug": "create-beautiful-placeholders-for-your-images",
    "locale": "en-US",
    "created": "2022-09-29T15:00:00.000Z",
    "updated": "2023-08-12T13:33:26.541Z",
    "content": "Have you ever faced the situation where the layout of your beautifully crafted interface \"breaks\" if the image (depeding on the quality of your user's connections) takes some time to load? Something like the example below:\r\n\r\n[<img src=\"https://media.giphy.com/media/Q7B0kOHlC7akJmwTCW/giphy.gif\" />](https://media.giphy.com/media/Q7B0kOHlC7akJmwTCW/giphy.gif)\r\n\r\nThis happens because the browser has no clue about the dimensions of the image you want to display on your content beforehand.\r\n\r\nThe easiest way to solve this issue is using the [`aspect-ratio`](https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio) property to tell the browser how much space (based on the user's size display) it should reserve before the image is loaded. Check the difference:\r\n\r\n```css\r\nimg {\r\n/* Makes all images responsive */\r\n  width: 100%;\r\n  height: auto;\r\n\r\n/*\r\n  Here, I'm using the image's width and height,\r\n  but you can come up with diference aspect ratios.\r\n*/\r\n  aspect-ratio: 760 / 235;\r\n}\r\n```\r\n\r\n[<img src=\"https://media.giphy.com/media/X4dBoFehuhSrpUIdIA/giphy.gif\" width=\"100%\" />](https://media.giphy.com/media/X4dBoFehuhSrpUIdIA/giphy.gif)\r\n\r\nSo, it solves the sudden layout change, but we can do even better do better adding an animated background.\r\n\r\n## Displaying an animated background\r\n\r\nYou can give a hint for the user that the blank space on your app should be filled with something by adding a background color or animating the transition between two o more colors, like in the example below:\r\n\r\n<iframe height=\"300\" style={{width:'100%'}} scrolling=\"no\" title=\"Animated placeholder\" src=\"https://codepen.io/douglasdemoura/embed/RwyWzEr?default-tab=\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\r\n  See the Pen <a href=\"https://codepen.io/douglasdemoura/pen/RwyWzEr\">\r\n  Animated placeholder</a> by Douglas Moura (<a href=\"https://codepen.io/douglasdemoura\">@douglasdemoura</a>)\r\n  on <a href=\"https://codepen.io\">CodePen</a>.\r\n</iframe>\r\n\r\nAnd our code will look like this:\r\n\r\n```css\r\n:root {\r\n  /*\r\n  Set the default aspect ratio. You can change\r\n  this CSS variable per class/id or event\r\n  creating diferente classes.\r\n  */\r\n  --aspect-ratio: 16/9;\r\n}\r\n\r\nimg {\r\n/* Makes all images responsive */\r\n  width: 100%;\r\n  height: auto;\r\n}\r\n\r\n/* Put all your images inside this container */\r\n.image-container {  \r\n  aspect-ratio: var(--aspect-ratio);\r\n  position: relative;\r\n  animation: background-loading .8s linear infinite alternate;\r\n}\r\n\r\n.image-container img {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n}\r\n\r\n/* The placeholder animation */\r\n@keyframes background-loading {\r\n  0% {\r\n    background-color: #f9fafb;\r\n  }\r\n  100% {\r\n    background-color: #d1d5db;\r\n  }\r\n}\r\n```\r\n\r\nAnd this is the result (check the code on [CodePen](https://codepen.io/douglasdemoura/pen/RwyWBOR)):\r\n\r\n<img src=\"https://media.giphy.com/media/9yYPBL1X9wnAKzhVfE/giphy.gif\" />\r\n\r\nYet, this can be even better by displaying a colorful background that matches the image colors.\r\n\r\n## Displaying colorful image placeholders\r\n\r\n[BlurHash](https://github.com/woltapp/blurhash) is a compact representation of a placeholder for a image. You use it to process your image before sending it to the browser and you'll get a string of 20-30 characters that the algorithm can turn into a blurred image that you can show to your user before the actual image is downloaded. Check how it looks like:\r\n\r\n<img src=\"https://media.giphy.com/media/1RSpYFokgWI2tKRKHk/giphy.gif\" />\r\n\r\nI have implemented that last effect in React for the sake of simplicity and time, but you can re-implement it in whatever framework you like. Just pay attention to the `onLoad` event that changes the opacity of the image.\r\n\r\n<iframe src=\"https://stackblitz.com/edit/vitejs-vite-enczef?embed=1&file=src/Image.module.css\" height=\"500\" style={{width: '100%'}} scrolling=\"no\" title=\"Animated placeholder\"  frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\"></iframe>\n",
    "tags": [
      "javascript",
      "typescript",
      "react",
      "tutorial"
    ],
    "translates": null
  },
  {
    "id": "7p8vdcau7gg894b",
    "title": " How to extend HTML elements with React",
    "slug": "how-to-extend-html-elements-with-react",
    "locale": "en-US",
    "created": "2022-09-26T00:00:00.000Z",
    "updated": "2022-12-29T14:51:44.872Z",
    "content": "Most of the work needed to create custom HTML elements that fit the design system of your company resides styling and adding your own props. So, let's say you have to create a custom `Button`, that should receive a `children` prop and should have DOM access via [ref](https://reactjs.org/docs/refs-and-the-dom.html). That's how you can do it:\r\n\r\n```typescript\r\nimport { forwardRef } from 'react';\r\n\r\ntype ButtonProps = {\r\n  loading?: boolean; // custom prop\r\n} & React.PropsWithChildren<React.ComponentPropsWithRef<'button'>>;\r\n\r\nconst Button: React.FC<ButtonProps> = forwardRef(\r\n  ({ loading, children, ...props }, ref) => {\r\n    return (\r\n      <button data-loading={loading} {...props} ref={ref}>\r\n        {children}\r\n      </button>\r\n    );\r\n  }\r\n);\r\n\r\nexport default Button;\r\n```\r\n\r\nWe use the [`PropsWithChildren`](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/d076add9f29db350a19bd94c37b197729cc02f87/types/react/index.d.ts#L822) generic interface that gives the `children` prop and receive `React.ComponentPropsWithRef<'button'>`, that passes all props that a [`button`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button) can receive.\r\n\r\nOf course, you can change the interface [`ComponentPropsWithRef`](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/d076add9f29db350a19bd94c37b197729cc02f87/types/react/index.d.ts#L834) for [`ComponentPropsWithoutRef`](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/d076add9f29db350a19bd94c37b197729cc02f87/types/react/index.d.ts#L838) and drop the [`forwardRef`](https://reactjs.org/docs/forwarding-refs.html) function on the definition of your component (although, I do not recomend it - _refs_ may be useful later on your application):\r\n\r\n```typescript\r\ntype ButtonProps = {\r\n  loading?: boolean; // custom prop\r\n} & React.PropsWithChildren<React.ComponentPropsWithoutRef<'button'>>;\r\n\r\nconst Button: React.FC<ButtonProps> = ({ loading, children, ...props }) => {\r\n  return (\r\n    <button data-loading={loading} {...props} ref={ref}>\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n```\r\n\r\nYou may, even, drop the interface `PropsWithChildren`, but on doing that, you'd have to implement the `children` prop by yourself:\r\n\r\n```typescript\r\ntype ButtonProps = {\r\n  loading?: boolean; // custom prop\r\n  children?: React.ReactNode;\r\n} & React.ComponentPropsWithoutRef<'button'>;\r\n\r\nconst Button: React.FC<ButtonProps> = ({ loading, children, ...props }) => {\r\n  return (\r\n    <button data-loading={loading} {...props} ref={ref}>\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n```\r\n\r\nWant more? Check the live implementation on [StackBlitz](https://stackblitz.com/edit/vitejs-vite-warc15?file=src%2Fcomponents%2Fbutton.tsx&terminal=dev)\r\n\r\n\n",
    "tags": [
      "javascript",
      "typescript",
      "react"
    ],
    "translates": null
  },
  {
    "id": "fyuo9wob9vf9fz3",
    "title": "Use this NPM script to create your EditorConfig files ",
    "slug": "use-this-npm-script-to-create-your-editorconfig-files",
    "locale": "en-US",
    "created": "2022-01-09T15:00:00.000Z",
    "updated": "2023-01-04T15:16:37.227Z",
    "content": "Have you ever needed to create an [EditorConfig](https://editorconfig.org/) to your programming projects but can never remember all the options you can use? Worry no more: just type `npx create-editorconfig -y` in your terminal and have one generated for you. Those are the default options:\r\n\r\n```\r\n# editorconfig.org\r\nroot = true\r\n\r\n[*]\r\ncharset = utf-8\r\nend_of_line = lf\r\ninsert_final_newline = true\r\nindent_style = space\r\nindent_size = 2\r\ntrim_trailing_whitespace = true\r\n```\r\n\r\nIf you want to customize the settings or even add more for a different set of files (by defining a glob pattern), just ommit the `-y` argument in the terminal and answer the prompted questions.\r\n\r\n<img src=\"https://github.com/DouglasdeMoura/create-editorconfig/raw/main/usage.svg\" alt=\"Using create-editorconfig on ZSH\" />\r\n\r\n## What is EditorConfig?\r\n\r\nEditorConfig is a configuration file (the `.editorconfig`) that defines the coding styles that a given code editor (such as [VS Code](https://code.visualstudio.com/)) should apply in the files. You can even set a different set of rules for the files of your project according to your their extension or directory, by using a [glob pattern](https://en.wikipedia.org/wiki/Glob_(programming)).\r\n\r\n## My code editor is not applying the EditorConfig settings\r\n\r\nTo apply your `.editorconfig` rules, your code editor should have a plugin or have EditorConfig rule parsing implemented natively (if you are using VS Code, you must install [this extension](https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig).\r\n\r\n[![EditorConfig extension on VS Code Marketplace](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/641onx2wrltmoq1ze501.png)](https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig)\r\n\r\n## How can I contribute to `create-editorconfig`?\r\n\r\nPlease, go to the official [GitHub repository](https://github.com/douglasdeMoura/create-editorconfig) and open an issue.\r\n \r\n\r\n\r\n## \n",
    "tags": [
      "javascript",
      "editorconfig",
      "npm",
      "npx"
    ],
    "translates": "1z3ovbccz4z4tmh"
  },
  {
    "id": "02cjfu0pbl38fsa",
    "title": "Increase YouTube video playback rate up to 2x",
    "slug": "increase-youtube-video-playback-rate-up-to-2x",
    "locale": "en-US",
    "created": "2020-10-25T00:00:00.000Z",
    "updated": "2022-12-29T14:52:21.704Z",
    "content": "YouTube videos (along with all modern video implementations on the web) uses the [HTML5 video element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video). This new media tag implements the [HTMLMediaElement API](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement), which gives a plenty of media-related methods common to audio and video.\r\n\r\n\r\nThe standard YouTube player just allow us to increase video speed up to 2x, but, if you want to increase it even more? Well, there's a solution for that: just set the playback rate to whatever number you want!\r\n\r\nIn order to do that, you need to select the `<video>` element in the page and change its playback rate to the desired speed:\r\n\r\n\r\n```js\r\ndocument.getElementsByTagName('video')[0].playbackRate = 2.5;\r\n```\r\n\r\nIt's a good solution, but not a practical one. Gracefully, there's a better way to make use of this functionality without having to open the console of your browser.\r\n\r\n## JavaScript bookmarklet\r\n\r\n<figure>\r\n<img src=\"https://dev-to-uploads.s3.amazonaws.com/i/hjvcu6sqxp24u5emozsb.png\" alt=\"Adding the bookmarklet on Firefox\" />\r\n  <figcaption>\r\n    Adding the bookmarklet on Firefox\r\n  </figcaption>\r\n</figure>\r\n\r\nIf you want to have this script always at hand, the best way is to put it inside a JavaScript [bookmarklet](https://en.wikipedia.org/wiki/Bookmarklet). Just create a new bookmark in you favorite browser and add the code below:\r\n\r\n```js\r\njavascript:(function() {\r\n  const rate = prompt('Set the new playback rate', 2.5);\r\n  if (rate != null) {\r\n    const video = document.getElementsByTagName('video')[0];\r\n    video.playbackRate = parseFloat(rate);\r\n  }\r\n})();\r\n```\r\n\r\nAnd here is an screenshot of the bookmarklet working:\r\n\r\n<figure>\r\n<img src=\"https://dev-to-uploads.s3.amazonaws.com/i/erxbc4xcxdk7v0gun8z1.png\" alt=\"Video speed bookmarklet working\" />\r\n  <figcaption>\r\n    Changing the speed of an (awesome) <a href=\"https://www.youtube.com/watch?v=G4MvFT8TGII\">YouTube video</a>\r\n  </figcaption>\r\n</figure>\r\n\r\nFeel free to contribute with this code in <a href=\"https://gist.github.com/DouglasdeMoura/052456a93f93d47982ccb5eefc602eb1\" target=\"_blank\">my public gist</a>.\r\n\n",
    "tags": [
      "javascript",
      "html",
      "video",
      "youtube"
    ],
    "translates": null
  }
]